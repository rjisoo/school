#include <avr/io.h>
#include <string.h>

#if DEBUG == 1
/** This function needs to setup the variables used by the UART to enable the UART and tramsmit at 9600bps. This
 function should always return 0. Remember, by defualt the Wunderboard runs at 1mHz for its system clock.*/
uint8_t initializeUART(void) {
	/* Set baud rate */
	UBRR1H = 0;
	UBRR1L = 12;

	/* Set the U2X1 bit */
	UCSR1A = (1 << U2X1);

	/* Enable transmitter */
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);

	/* Set frame format: 8data, 1stop bit */
	UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
	UCSR1C &= ~(1 << USBS1);

	return 0;
}

/** This function needs to write a single byte to the UART. It must check that the UART is ready for a new byte
 and return a 1 if the byte was not sent.
 @param [in] data This is the data byte to be sent.
 @return The function returns a 1 or error and 0 on successful completion.*/
uint8_t SendByteUART(unsigned char data) {

	if (!(UCSR1A & (1 << UDRE1))) {
		return 1;
	} else {
		UDR1 = data;
	}
	return 0;
}

/** This function needs to writes a string to the UART. It must check that the UART is ready for a new byte and
 return a 1 if the string was not sent.
 @param [in] str This is a pointer to the data to be sent.
 @return The function returns a 1 or error and 0 on successful completion.*/
uint8_t SendStringUART(unsigned char *data) {

	uint8_t length = strlen((const char *) data);
	uint8_t i;
	if (SendByteUART(data[0]) == 1) {
		return 1;
	} else {
		for (i = 1; i < length; i++) {
			while (SendByteUART(data[i]))
				;
		}
	}
	return 0;
}

uint8_t ReceiveByteUART(void) {
	while (!(UCSR1A & (1 << RXC1)))
		;
	return UDR1;
}

void printErrorUART(uint8_t err) {
	switch (err) {
	case ERR_FMOUNT:
		while (SendStringUART("ERROR: Could not mount SDC/MMC\r\n") == 1);
		break;
	case ERR_NODISK:
		while (SendStringUART("ERROR: No SDC/MMC present\r\n") == 1);
		break;
	case ERR_NOINIT:
		while (SendStringUART("ERROR: Unable to initialize FAT file system\r\n") == 1);
		break;
	case ERR_PROTECTED:
		while (SendStringUART("ERROR: SDC/MMC is write protected\r\n") == 1);
		break;
	case ERR_FOPEN:
		while (SendStringUART("ERROR: Unable to open file\r\n") == 1);
		break;
	case ERR_TIMER:
		while (SendStringUART("ERROR: Clock selector for TIMER/COUNTER0 is invalid\r\n") == 1);
		break;
	case ERR_FWRITE:
		while (SendStringUART("ERROR: Unable to write to file\r\n") == 1);
		break;
	case ERR_FULL:
		while (SendStringUART("ERROR: File system is full\r\n") == 1);
		break;
	case ERR_FCLOSE:
		while (SendStringUART("ERROR: Unable to close file\r\n") == 1);
		break;
	default:
		while (SendStringUART("ERROR: Unknown\r\n") == 1);
		break;
	}
}

#else
#define initializeUART()
#define SendByteUART( data)
#define SendStringUART(str)
#define ReceiveByteUART()
#define printErrorUART(err)
#endif // DEBUG
