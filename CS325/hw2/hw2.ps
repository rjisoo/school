%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: hw2.dvi
%%CreationDate: Wed Oct 23 22:57:57 2013
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMBX12 CMBX10 CMTT10 Helvetica CMMI10 CMMI7 CMR5
%%+ CMR7 CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter hw2.dvi -o hw2.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.10.23:2257
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.17, 2013/07/08
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ rightTrim psStringwidth } bind def

%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 805 2013-07-11 13:18:11Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def

/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: groff.enc 0 0
%!PS-Adobe-3.0 Resource-Encoding
%
% @psencodingfile{
%   author = "Werner Lemberg, Michail Vidiassov",
%   version = "1.0",
%   date = "2006-Feb-03",
%   filename = "groff.enc",
%   license = "public domain",
%   email = "groff@gnu.org",
%   docstring = "Groff default text encoding.  Used with MetaPost."
% }

%%BeginResource: encoding groffEncoding
/groffEncoding [
% 0x00 | 0
  /asciicircum     /asciitilde        /Scaron            /Zcaron
  /scaron          /zcaron            /Ydieresis         /trademark
  /quotesingle     /Euro              /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
% 0x10 | 16
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
% 0x20 | 32
  /space           /exclam            /quotedbl          /numbersign
  /dollar          /percent           /ampersand         /quoteright
  /parenleft       /parenright        /asterisk          /plus
  /comma           /hyphen            /period            /slash
% 0x30 | 48
  /zero            /one               /two               /three
  /four            /five              /six               /seven
  /eight           /nine              /colon             /semicolon
  /less            /equal             /greater           /question
% 0x40 | 64
  /at              /A                 /B                 /C
  /D               /E                 /F                 /G
  /H               /I                 /J                 /K
  /L               /M                 /N                 /O
% 0x50 | 80
  /P               /Q                 /R                 /S
  /T               /U                 /V                 /W
  /X               /Y                 /Z                 /bracketleft
  /backslash       /bracketright      /circumflex        /underscore
% 0x60 | 96
  /quoteleft       /a                 /b                 /c
  /d               /e                 /f                 /g
  /h               /i                 /j                 /k
  /l               /m                 /n                 /o
% 0x70 | 112
  /p               /q                 /r                 /s
  /t               /u                 /v                 /w
  /x               /y                 /z                 /braceleft
  /bar             /braceright        /tilde             /.notdef
% 0x80 | 128
  /quotesinglbase  /guillemotleft     /guillemotright    /bullet
  /florin          /fraction          /perthousand       /dagger
  /daggerdbl       /endash            /emdash            /ff
  /fi              /fl                /ffi               /ffl
% 0x90 | 144
  /dotlessi        /dotlessj          /grave             /hungarumlaut
  /dotaccent       /breve             /caron             /ring
  /ogonek          /quotedblleft      /quotedblright     /oe
  /lslash          /quotedblbase      /OE                /Lslash
% 0xA0 | 160
  /.notdef         /exclamdown        /cent              /sterling
  /currency        /yen               /brokenbar         /section
  /dieresis        /copyright         /ordfeminine       /guilsinglleft
  /logicalnot      /minus             /registered        /macron
% 0xB0 | 176
  /degree          /plusminus         /twosuperior       /threesuperior
  /acute           /mu                /paragraph         /periodcentered
  /cedilla         /onesuperior       /ordmasculine      /guilsinglright
  /onequarter      /onehalf           /threequarters     /questiondown
% 0xC0 | 192
  /Agrave          /Aacute            /Acircumflex       /Atilde
  /Adieresis       /Aring             /AE                /Ccedilla
  /Egrave          /Eacute            /Ecircumflex       /Edieresis
  /Igrave          /Iacute            /Icircumflex       /Idieresis
% 0xD0 | 208
  /Eth             /Ntilde            /Ograve            /Oacute
  /Ocircumflex     /Otilde            /Odieresis         /multiply
  /Oslash          /Ugrave            /Uacute            /Ucircumflex
  /Udieresis       /Yacute            /Thorn             /germandbls
% 0xE0 | 224
  /agrave          /aacute            /acircumflex       /atilde
  /adieresis       /aring             /ae                /ccedilla
  /egrave          /eacute            /ecircumflex       /edieresis
  /igrave          /iacute            /icircumflex       /idieresis
% 0xF0 | 240
  /eth             /ntilde            /ograve            /oacute
  /ocircumflex     /otilde            /odieresis         /divide
  /oslash          /ugrave            /uacute            /ucircumflex
  /udieresis       /yacute            /thorn             /ydieresis
] def
%%EndResource

% eof

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D45499A585CAB3807A07279D977556EC6AABD93
2DBC998B0EDF127D030B6DA474DDA1BB79AA4AFE5E1DB4F246F198FA5FEFA145
E9D3741D1FA19304D320DF38D7499B0FC3C9C838E5D7E8817461770F2E73B562
ABCFDD32FE59887D0646650B2407BC4ADF3CAEC1863ADDE9A6B0F0D2E4CEAC76
53A842849A0C63DC6514A74AA6D3FBCF5C8B7911EE1A5CFF9EED8AEF7B6C18BB
CA642F6B5F64B0D66F2D4A415EF274F48291D56FDBE709AEF8A95F7D03F55D87
12FDE2290503BD648A94B4DCE33FD440D802782A34AFFB9A6AD1D26193B04AE2
3A854C8D03891F0D76190F12A8EA33F54ED43DA22F904647226B05F7FE1C3B47
48D0A496FB188276AB1CDBC72E2E9D965499F1CE613818802E689802BD96CDB7
0D8FAD80BE2F3E639DD0D3BE20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/UniqueID 5000790 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163AE57C48BDE42D6C1556A37A4B44D30569AA0A3312CEEF1C35327E7A92E
F2EE4E7B73DDA96096EE36242AA37D24D75CB4021C96454F56D22E46253CC398
56C914E2246893FC1F6DEE943B9E5CFC3FDF89BEFD26498437082246038C4A94
606A5D1A9FAF6A14ADE5CAA159FDEABA0AD7417E7F6B7F5DE3F181CDA0D7E922
BEBA86F38F87ABCC697A80102EF2E0D4370D8B40B16153E4EFDBA916058CBB14
E78DF01395AD8F8C1BCC43BAB10443E92F1DDBFED3D78F8919F275722AF44C4C
1FDC54DE5CBF0EDA5CD019A73B7944352D5C77B7BD8EF73C7EFAEA8177D2E130
3596538E5EF700FFA48021A3306256792C605C6BE3DE0400B03EFF300C4C7131
6CE7109D902BBAE513B3E7C2384C8FB8B7E7949C8C87DC321EC1E5179A8A5ADD
17220ABB9A29DFE73268A6D2AA7DB90E58900719A8F373E9786C68EBF778F15B
23414D4490C3869A937DCD1EDA923464C470E1FA47143619DDE30013C94378D9
AE058333CCF18ECCB0C5CA9C2DEFB009ED964FC74C23F1C225251F318FF7C437
AB9369ED158F27ADD340F46C2A61DBDB81DB18072C7E619A87D96273C5E862A5
243CC499B0F25D39F5DF2813A66CBF86741FD5F04A1813295F90673F962727A7
5409E10232B130DF2B2E4250F5CA8C6ABC1BBB23B551617D778C35519FEEF86D
A77A5290E717C80D4AF6112BA3296ECB9A23EEF13226B231643344281A2B09A5
EA95716703C86A2FD6DC0872267981DEE99145F1358D5688438686AB85B63FEE
99AAE51019C52B98E55A9BBD647EFE0B9516A968898C9D99696BB963AB27CDCA
A0FB2B2796D9F739205816B90E70CBD9DEC34CA231F8FE76B91F01D40C9728DE
AC14CAAD0F97E5E96CD1D5FA511F88E21C85EA4F84536EB66924908E281DF129
B57D45609CEBA50C232EC63D0A2751304BC63362E97DBA6EEF9F6979758DA19C
204C30B0E7AD46A0885B589F589E3EF80A1CBB643A8744D66DF451172E9825DE
FAC21228E28F6710947228A07230643AF7D49D436D0BEAADC717D914D4C5E021
0A887E0683D89D95E7378971840C688D221C3B68BB05CCEC6B103CF0E344D4BD
92F2B9453B2FAE0F34E3CCB053B229900D9413FC7EAB80B776D19F18D6BC9744
5668D658432DF9099CBBEE84EDCCCAE48FEEA1E19C2C58DCA242D1C6BEA07E93
C31D65A5B26627DF420FF163175BC61517AF8C6009ABBB44495E33107BFA50C6
F63B6D31BF2457F72163A86EF42565A0F8421AEF2AED6EC46AA71303FE0E3FBE
0D402251876A374F482E5D2AC06519A05B4C93E0F704100A04BC6DED2A41BDB8
4EFF3C278E4BDBED6A37F2FB0728C8EDF223E450AD5E685975EDA8F513BA1666
BBA904237CF4B1D8587A40000FC9AB6F605ACB167DB620A5E185CAC3CCAE65FC
DD670017FC1FCC4E553C8464499BFDB96914963F0BC7D0E23C922CB28ED42875
0A783CD35E37E91608B37C2903F6FF366DB6499D1FC77E145A8B3CBA103146A3
F1AACEA2748865A293971F125FA185DBE7DEB8F774E652131B55D647343CF69E
852B892C5CB8D2D5D038BE9B0C6B592F4CA6497CD145B55167E863680CB9EB72
8A97C4EB69C64FA457EDF1BE2F1E1C7D4B1FA69D5C70B3EA2E81DB5003CCA19F
763CC5807CBDF49E625418B9ED52C739110EAD612262FBB24C68845971A081A5
4D86F53955B5A69F6111547E71777CB888B2881EA973238D41B43FA146DF4909
80B044F158E015987D11BEB909EE59D82691B833FA12058B03020FFC3C80C83C
7A5061306D4FB4ACD051E660F48ABDEA039114D8FC37C1C2A7977B7FB27EEE0F
2FD4795AA632F310053537B74304161BD23D9D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/UniqueID 5000788 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87E948890C25563CB26A068ABABD94F3D42213218F2ACBB2F5B317311474B222
BE1844548554B37C97284940D5B7AF9E4CBD884D4994A76CC1ABF8E6AB0676A4
0A8130F05B0ABAC088FE4F9FB536924A55451C8772B29087B8E5E649DA3B449B
4A055214DF69D0218549440B3665E4D20C5A8660B3E0C3ABBA3426E7820E1A94
5D273A6ACB263765D340333B5CD8D1282FD5B0F5BD4D40DA12A5CF44075F33F9
BCC0B4C20EADE30D0ABB3562C00540200F056E750FBE2A926A2AD1F1404A836A
80CB74BDBEA40001EBFA622BAF9849086769C3D8AA7E5708D51E925FE2FD3F96
07489BA9D9D6EA1D1F9800C77BAE1A76A1BA0B59A7102CFF827BB61ED0F77634
8730B5F35B2DF6436C3DA663ECF9D8D64B0D369326C4163C195104E0C592D074
274717933D4A256E9E078F0544A002079A51A46403465A564AAA4DF73C27A35A
CED84E6A9B242B045018D8D59FE5708FF2B22BD8BDDDE43B10395667B6CADBD9
49AD476083676C4B05F977E636E92CF904BA272A84EE9E60364043EAD81029DF
15A2D6194985BF0BEEADE36826A386F59F72631864170A3E38A1D7972DB10182
A42836B8B98E29D514ACC06E9E968FAF868B4DA5BD24CAC756AC127CED3BB18A
A0D55CFE4CA2C021404E90B3940E56A4C9754984111293481821CA27BAD040C9
864A7C32C0948C6712BC6FD9F721F9796CB3BA13FFD6FFB1832FC80DCA5AB296
D38E5228D59B8240004937EE3EECF71FC1DC076D298124D953B2B92C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/UniqueID 5087382 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 70 /F put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC62979F87BD3B70A8A2
C7C994B4FA24897D4F8CBC0D021D6F1B42B9BE470726AD1F8E04551231F475EB
9DEE98C52EE5AEAAE9A595CB446F741F1ADE9006577067DCF9E512E590119EA3
6C97CC7877DA5921140218B522A7A27CA65A3FD1F056766DA9B878C4DD18B366
D576D6863A7C40440E36581874A1172369575377FD0A0110B438199232EC6DA2
DA0CA513FE881A55EBCA984B25108224BBAE88C124D9909D46A12EE99E5DE58A
CEE5F7F0A312E3BCA66C834104F9C7155C91F3EE40940257BC1363AB9BFEDC2A
7A95CBB5923AC93E37DAFF1DAEAC9A272BF4EB5B50ADC69BB378FA0C3F8A86D8
F45A593D5E02CD1D9E7C9109B6ED58D1DC94AD563F75E81F8778BD4DDB3C82CC
C69F8577C3E87911DABC07F4B724CAA1FDFAA5118F7CC78571A7528BC66D0C0E
489661A68BCA69EE7EB1AC2F4B47BDEACBC309CF5397908AFB2F23E5D18BF899
AE8D0BB0F91520AA2C46CAEAD6416E60833DFA88817D9119FC3D83F8577DD4F1
61132515E715ACAD224ABBD172CCE6CD2B6025C458A49C69DA35451D50A913F4
4BD36144002D1AC2CF966E92DCD675C678127799B2153A08A7611B0CC7278DB9
B5E133A149FFDF47E826517029FD75458F21E6111F9F1A6FC8DC7FE88AAEE37B
AE51A9D34495336A5418A9ECAAF333C948603BFAC91CFB24689B55F64D88D0F7
5994EE2B68EE8600F8CC0754728C134B4B304979D6065F739615F170A559E6A8
12322BEAAED8B8B39D17E1A267FC78B8E4956DB60F94DDF0ED5354A87A511CFF
89EC0F77697DC78D42C75835987764E8633BD74A59A2E2CFCC86C1731C4435D5
29A07E254E99F044CC6368604314D3B1932CF4D8E1BB754A6E2C027A98357DE5
CEE3041A0E8F48D28CAAF789C0471D6065A96AC3A0BD6298F1923FEC966D2AEB
396FFFADA45A0F5082B6E1425AC935C67AA26C2D34E5DB54EA05A6029F40CE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 67 /C put
dup 79 /O put
dup 83 /S put
dup 101 /e put
dup 103 /g put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90AFBE22541B28C80755318
BB1862294F1A9E8FC624FF44D2694184CA17E43E2B7752B48A75DCFC69B0F51A
46583CBDDEF0D200200811E18B9A1ECB5C7FBBFC1A88E17F1444AD57F0B3F4AD
E8D0DCEB488DF225D047799EC5765A12BF14D0E86241AB753C32214F6A8B3B92
4B6F0B443F3A3F94CF0C7669ED9E365EDC2D5A99F18C212AB1A2987CA420946A
DDFEE44D42B77B7AB51FCADC6C3B6CD90EACD4E374E88B8B0E3C73A808B4D1BF
60A76C7A1780F130D25C3921E7119A7A7F653546E682A1244FB1BF950B287EEF
7770CE7E2F404799557DD06FF45FCE247364ECB8C8A6653F41598B1816C81F8B
EF9BED29CEAD50C383A994117EDC68BBDF39896904FAF4E473AB3B704C683E6C
590BF205FE0D64895E4C7CE6D9F6C5E8E4508EEB3B16AE6067F131745E2558A2
D2C33E1AC41AB8FD3A6A04F971767EE5F0BD8D2E92C0A1800E4FEE943FA8D2D8
6C12D085AFB146FF6BE7F8037D7DF22EADC5C75EBE0724E52DD299D20C7EBA6A
264584F6B804296920EA3DFA981DFA7E34AB0484D5227C69025E81C1C7CEE94D
6B6880650940F361C97EF558EF5202AAD7C72B5A523A5943DBAEE793C4725A2C
0791BBC6394B97A92E81FD166A54F04327B4A2C32D4CA6F0972B09BEAFBF5D38
F40FF266CE7D03F3B978DBCC30FC0B52C14DC75C3F13C107D22285B582667AE5
F9C4C537D7F74441FCD27218B1008F76B9944FCA9547E78109155312EBD5FC89
4F9DCDA511F37AA42737947F081A9169B8B773B054B33727EC4FDAB96D66B208
3EF01E470FEC74CF323D8579D13750F9EDA49FC6C1FECACC86B86420F6F968B2
F6AE9616AF6C0F96FD5A1BC27C1FCBDEE33B6046DAD0BCA5FD5A1056FDCCE09A
08C46ED62C0E7E567AD143B82B331F2E28B1FBA09FDFB95AE51B36A5E665313C
BE291F95AC49D8B22AB7F35EF23608FBB92ACCC8ED0E4E912B35EDC8A6EB58E6
484F29754F92A6EB2F2994428BEAED6391B21F256B3823E42698A36ACCEC399C
7F433D7F3F175C9E41C532DD044115C833E00F28A0B6E6FFEA7DC75393503C32
4A82F8E6C0C25B7AD189F7D3FC8134684660D6DB6BC6D9E96DDA7077E7C337C9
FC6B3151E560E5430CF2AED60917766AE21FB85514EC59A647A1D1645F4B8DCC
A75AB4C6FD36D9AF3FEC5D29AB5D7FD5D4638879598F5D42E6CCEA81C609197E
8D4E6D53616DF5852A80FF37A9244E167CB366AF6C8F672A342411F7EA0B42F2
D754AA88CDB6F59981855072CE10A009902B3AC063FC055EDEFA9B4DFC3BEC0A
5752A56EC4D02ADA55773982E1678BEF5A3A9700B6665372818113559B83964D
6AF583F76863FA09DC9205CF07461154BF9C23EA422977B0BC328E317C4183FD
FF6855B99BCCD524CE22A6469D7D4D075B8EF99847E22971BDCF3BAAB5658FBD
0E96ADBE36F358E75BE515C72F6049B22DB8809F6DBE086FE3B6B2A04FA58B6C
19922BAE1104006B5BFAE9243788457E43CD4B65362F3F6FBA968E56682B9443
3F07766D743DA5C9DFE44F1355B23C73030FB8C15DA06B7BD9049E806505A72F
1A6D2BB38F42F4E05EF38061C47C7CED12E7873721CA2BF60115FC7534060F0A
F15F19FBE7339BDA39AF00491A8C941206B7B3D7EA99BBD2BEC12B9442517884
E0617CD4478299F7FC93FDB6905EAD7630967571EE66F088C08C225679E73705
ECB5B4578D39570D61161449DB609530B28DCCDD8E62A473EC53D8F6672BF781
A4088EB60F8A0DDD027C793CACBD4136429634E476679E672D6C500E1089659B
BB4195937EB87C92DD7907412A64BA9B28F21294519E232EBC4A927C24C795EE
A115EB51E3EB339CDAD6A78ED12E0F4172067FA230051B73E6D1F4656F9E4428
3506490214C73C1135B3CB04D9B05985EC470CF303590DA7FFC16F6445886799
81301077934E8392741326065CA9ACD4C07F04B98F3D7FC0D4926AB4B6AF95EB
380474993D40E775411A6BFD142E6044BB60B3B1685E68472F7513F9341B8AD6
9D21AF13147DCBF3FF8F03FA7145C7D5DBC14A186A21929A4B92C136918282D1
A987F06DE0B705C9DD5C9F17060643E95FAB98EB397B2DB0EB0E03943C4E69C2
EF7DDDBBE4A5C6D4663BB267B82DE95376FE62671A97FE35F8CEB01E274FBD8C
465CE88BA7ECC374E27D37DCA58A2D2724CD7D9414C0C5092F93462F2625770A
6EA1974D631B7AD7C329B44E2BA56C6574937E3E817B22888DE1B61BC1201DE6
12F0F6D81078CA593738983A5693ED1049AB5458ED5319477255DDC5F7C8F384
AE60B80A4160BEB627F3168656928E1C418BE18222CDCB2699CF9644A1B7371B
4316A8709A19611465C6E9D81F5C02BD5DE26982896F40E9F6FC88ECA941B0BE
5008CF80973269945174AA1CE929C9AA6357F7D17359B902966D1DFC95338124
686D154663F223997D6D559407941FCAF1BF005D192F15752825543B89363B92
676EE040D3850936A981C585D51CEBB9534BF555E3E48D94E9E5AEA51E3760AA
7E3967D4B34CD0477BE073E52655044D1F947D60E5481923A3370C5F89A461E5
F78924BAD073983D98E2A7BDC4137A5DDD9B3F2EBC7CE2015C0336AC144A2C0F
338A0EC2C4507C00F4E08230DAB44893EB2FBD3EB9846CFA6BB063218BB75E23
BBA103A4192A17386C609CEDC285205DFF5B0647762D656A6D0D468E307E1B81
1AF39BCEA510AB3E173171EA7A1D44AD56A910AEC1E7F64B623BF2D17755FE7B
2AD22C139174B27215E11611900F60532F77CC922324A7E717E02BA9FF2A4B99
E73D6CBC2B51CD7AAFE6A8B4212FCC7BB4F16AA18880E2A0D606113940AFEE42
D4CB79AF6703DB98A359B8DFECBCE4456745967D54E05A79D026CE9F5B78A5F2
85D13539195B5A47D9F397C94A6C5BE31AEBF714255D84A1D9F624FA39AF4C9D
FBAC63B71B5285B246F8A9216BD16F4A73CD9E0120F238932D562C162B0CC77E
C0DF5E3563ED2EA7E1AE02A08E381E5620B1EFDA1A5208ADA2B04234414CD95D
0A61503E105347096069BD96D91E7977DE64F544D66CD4CA6C64CB9843C98D2D
020545444E2254ADFF2B3A70C5B389D5631AACA0FCEFF173AE7AB363E2E454E8
18DB945A1BBA82006B70194F7B01CE52983D6B7687A6520FA8112D1B19071B72
F1835BA0D249001B57CAFD7969937446444D866E3F066817035861E223B20B6E
FE801602B02808380FFBFF79843203E3B4408AA2D4C9BC38D0CCA2ECFB00F9F0
3B59854078F2A84AE114FC624A434460329D769ACF9F6DDDC908E76D831B2BB9
63D15C180B5701973BD9D39EC7C916325189EEE3C32C876BF8D3296BAA65B04C
9B83A49F2F785D298E324BE138363576DA59BF2CC4970E2524595344021DE90F
6326A1D871EA39DC987E3857C154DEC81F6EDB858DB7922E25DAD84F7C4DDED5
33875F05A02BA4849D788EF846C20B1F4046A41219C1ED625D6E4BB9A2A65FB9
BDAEDA3ED6C7955D2D30D0C6943495DB270B9E3F41A9AD29EDA1F64343AD9E45
8910A3DE1D25CC304F92E2B727136032F3C089B52EA8F87280F52EA3FCA6848D
A826324A497C393772F156C709FA1C0976F7F8EE15EB4682F0C0E2BF11650E9A
8D241255A5A999F1AA83270B655E354D177AAA05284912469113159F4E8134E4
8C194C158A012480869DA113
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 60 /less put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 83 /S put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF433517EE593A104
F3E083BFE49E9CFC4269A86B58AAAC141930A2B4193F74FACC1EFAFD38D3EDD8
A667280B865E25B0FA38A6356EC5262F82A105754006EED77905F74F4C14DB90
985DB906D06C61AA723C8A341D0A0985708D3F2F6F1289308A60706034F58E67
1291C7BEA795B127964733B0F46290014E4AB8C2EFC45C14CD8F85B8322DAD12
26FE504620FDEC177FF154462F21E9A2F3C197EFA55B7787E19755D48645C853
2F04036A092F72DD544A3412418269BD7D1D47B1B478FE28C2CF12E26666E3B8
A99DD9B91EAAA1D69047CE602F03E074FB314CFB957757B3A040B5D3E4129B8F
C87B571B2FF745B8CB245347F082881B38DAA2806CD117CAF7BA55100132819E
B6177E688F411655C48FD5DB2CB06725990316D55AB744B3033459B45728ABD5
6A234E70F3A203377F7D1E885CCEB80F10307CC13A1050AF50290B68124A7CE8
93095F766E2E7937D120939C123E631837410E4D41AD286C7A6CF2401C8E0965
3BF51B7FDD1A1CB687EAB97A737480BF751D9326E6D6DAA26CD5D5673732D531
75A76C52EC37CB7F6863A353FDECDFAC4E02765E0F6C1942E334B822944D3994
27F12308F7E5B42D1B27D50B5F8E93AE00877990630BC429C898709B8A88288D
EC9DF319FF408B3C783D0718585DB711091EA58204F935EBCEA48ABF19948434
0D1DB90C9222C9453427BE75698D18ED153CF2CD767884C5430CF379E657FF3F
ABB6D3F28ED73B010B66A5D91A1BD801EFAB50C26895953E493CD5E3519C52C1
BBEDC359E616B0784729D844566898041893C01B038EA627ED64658353BE1CA3
769040F003E92214B9DFC90BD2BAC23CA90A1B3FC8F5D6500B7F2D2BC6573D50
455CC07B399916B91A79A6455ACAD83350095BDEF6C7C11A67ABEBEDA7298A01
D409519E10E24706C815BA4F85CC48FBEFACF55316F9F40EF1C85B224108ED37
08C50B070833B9DD6E94F1A57DBEC95C208C3E590F45036691F1A6FFA490B18E
3D3321C9AB6FC6D10AF305373E1B87A5E462AD7A71280B7647A25EFDB18D279D
752527A0A701EBA7326300248A865AD85886741463E26AD60EADCB11AE1D80D7
B0D49A4E3F5D2E824413A72119D2484C9E8BD597A7B402E60BEA64C8548143FA
23FD0A83137BC564F6286086E8489003F84951DAD7236FCD97E10A2E18ED2539
FB148AC5342A93321BA2835A9D15E42D787630EAE357855E36E7AA63CB95643E
3E94E34E164E1F3396AD2F24620366F209F5980DE8C1EA50C522B5A42CC442E2
24641A2EF3F6E05B1A103356CA374AE27FCE89127BD552B9E1A1678CB761701E
73234DC8034FC98A766D3D26499933BE81F3C7D00938789A4E8B4F55AF936438
B4F172A5EC322DE7913C696053D7349F7495E1F8C4A8033947F1D5D41C0820EC
12BA299FB6769E965D88BAE2768B95C16BC0ACB21391BA09E24E8E97E2BF1B2E
156C0D43D48412434C9F29EB43C89247FDAA642D2EBEE2C4B077D539CD438716
393B6A1A16FE929E93077EA3B23D74891CDF60A34B00B0F3D5131D64A68A20C7
E32793E2DD58D2E850E571F534E0A52D22527B11D20D24CFBB85F8916C93F853
8A9C467D7A83DE016D5D3DFF7BF162F64ED65962C5DCDC6EECA78DD91654C8FA
5DF6F3D66A10D1A54976ADA1913524BB39080FB47F44979B704DB9CE8CF1FFF8
3FDB4A95D69A2997F70A3B0E367AF0E7E5795F80EFF613C108E6DC49562630BC
40C4637653261B1EB6D25B7521CE4D698903BE7B5ADFC6B2DF405DA906B3B538
C02120ABB41E72EAA4265BB0838D519432023A2EA97D0B4D3B4D28FD5180F75E
EF61BE7242619B6D005F2D6E39B398B037611A6A981DB0C6D6D00A37098C4730
D457EA5830B6EE88C7E19E4643BDCD7C48863E5B264DFD99B7850AB4020DE478
21E5B6637CD59BF833F156E8FA7FEFA1ADDD1A5BB90DAB18D604CB467210C7A6
C0A0CABBB72135D7BD6C094C0F27F823B01B3AD88DC10E4D020FC6E8677255E3
AF8F6EA04652AF6CDC7F00D14C3682EC2A0D515E412FB78870300E12BC7EC61D
BB61084B43702CBC25BAA1ABE59A480452AC635936FB6661A921FBB5A88646BA
DB9E7AFD407564C80EB1E70B5620ED9E6A94AC62BB8D3E75AB2FBB2EB4E5230D
3DFADCF1892B2D6F316C155968A3B9C77F202B4DC7BA74794E9FBD38B14F7F47
30CE677B526DE332459426760150FBF84B88D997BA5C7B7DC3FB5887E750152A
94A0A0DA3C789D1AA0C0D2A93733FF9FA626CE5C558745A4772B854BA7545DB0
C24BDF4907ADA234C6508D2634B8B85083CFCD186E23676C3860C670D5EB5B0E
E6CA09A93AEFC35F225CC4908241B24562638485088073440DAC10C0C709E771
AB92E0198C93C7ACE895A872463510543E7F77F13E124C83AECB91A24DB7E056
09B40FACF815D57DCFD077171B372686B1FEEAC57CBCC71F456A6040BA35C129
74E419967C468C4ADA7CA6ECEB80BEA49E3CA936874EAA3662DC4A2057235CEF
0B9DA950A0D4C3C5629CE9608BB7E77F5201C8A046181D28CCA2DC9639E42565
70975B89D583AC6B02D26081B6161915D0DD935C4A4DB9E1BF962FF4C8BEFB1D
6367787619114CEE12254DD6EC687F3AC3D157859789C5611DF0B7D7B1754CE7
4DBE34EB6E4FEC12CC02CF98E5339AA43ACAFA75E49D502E656CD382E08718E2
253E2ED9508CE7AF4B0D544E746388E7B23653E0063E0C15FDB7D763FCFC9548
3BB0C773266D8ACED067119C4592AC1DCD83087C2DB81DD4CFFFBD523DB565BB
C3A1EE85EC9F5BC0C1CF176DD2A3C0A350D4FB1C532017AE5A4D3845EDE4425D
F4AD5D5043D23E21B2DD447832B4E1DBA73C0A0AD577555E0571FE7189F408B3
22F01C4F00FC3059E60006564013AF6D34C9FE2BBAECAA2D7FFBDD7E28D8F283
E1B8ADE9CA715902ADA9113E083DD33936657BAD25A40D5784ECFF6BEFDF72BF
7EF0A2AE13FBDC42A2D23E27D8DB4AFB688FB6774D557A00B173F9CF3B836D3A
2E7E499D9D41F8F9F55A4EEE2F45F58D981B48CB5555C2DABD6EEBF2D2852575
2C3F659C64C4A6C2DA1953D79832D5387D70FF0D350190803FFAC719C26D0488
CF3B65148E0A9BDEF86D55CC2E0BBBB6E01CC4EC47633804EE4DEB52152BB04B
F5A3156CB2E11DB41478CC58A480B0C410440051FD57508648C76C72BC19C131
3D4226CD1CD61FF71851E1ADB4650E85060743079D6E74FA1B9CEF9F9414E2F6
82F8337A9B508AE90C768930A91FC2F0FC7C23915E3F2AF31140F06B44E162B9
C1EC4FF96DB89A3F035660BEECF4995DC35D46798155A331E40D0C1BDAABFFD8
0F81FC66BD0BC213BE1704A7CA0218FCE0286E58BE80A2C9F9D0BF1364C8D11B
A169DA917C94CE5285B85333741525DB3E9D7758011F766A4E0BFD283955F660
8F5A87ECCE0D316EFE135136A420C5F98C9EFF09650B9006D73E24E5E04C6EB4
9189871ED270FE063583B362AFDCD58D08ED5F1137EE8E50AF22F6DD42BA004F
C1D702BFDC66FF902616EA02670921629B2AB2C961DAAC0C45357914BE2C1AE6
876EA91792032BAFF440D459433D64C334F691354BB31E00E7AAD05FB0E62B75
1FB226317440E34D4258505360EF9B56E8DCBF1D7B4909CDB78B480076719366
9FD04EDF6E7AA8717DC7AB7518B97097DE146CB73F215A3A668E7F11B6FF9A19
E8C11238F5832F4B67751E902131186B2474B07A6BCC0BE258073C0B104D8BE6
AA47B4283EBA9E27A0CBD3E3E8B345F9E2DF823E67CC141198B2B07FBAC4752D
2EC98BF1E4ED4C23EE50AC89F0134A4FC58C735BA4C5EF39A75C3AA209D3926C
87D809766FFB42DFB94BEC96107E64F6EFB94DD8D0DC47E34E6A0F861073FF42
CFCA054689E30F8903F59281EAD80AB4ABF3732A6D148C33849A50A0C0123547
8AFAD0F6AFCE7D4A85AE10A858D37430BDB72626EC269B429CA2A7D3F4ADB31C
432B7A6B88417AB25F0F726058A63563A50E105A428005695C7DC7A36846BC99
12A0E5679AB5D90D38E94BD4A64E88BA60E6617FC13381F6C4739A1A5D16FCF6
08D6DC21B7D21B75A1F793AFA24603E2956B054F4B83234E85E162ED8D971418
11C08C07AFCD61ECC5A312666BBF8BBFBDDB0E7217519890497B4BF370524413
F90771C079800915CAD5813667C9609BA540BB935A21F90EAF530E6E7DFF1DF1
7272BAD18E14D20720D11FD2FD36728D0B5FB6890F7FEFC1CB8893C5E6966BD4
1B34B2F8FBF64DB50E84E7CD6E67E9FEFDA2296F88A2878EC47F63F7D3ECA60C
0878B2E454DCCCD82D54B082343DA73E7420EE229039DB39C68181D4CE87BA66
7CA5F18FC35B4C37B2837F6A7F6B8BDD6DF89AA86B419CCD95C5E1898AAD5C6A
7DAEB323A07A1BC1048AB683B5AA7F07497882EE83D29F974312517E3D603164
2000880047D8A71534AEA759B264EC1EF245AE3F4C7B7B599DF9610CB87972DE
9561F121E4E3C7D797CC218F0E68D0FFC9CCF9F33E149D52A1F1949820A72F61
E4098F54716B384DC7E499D1B2A1E59EE026A9A9E132343CC1A083E919428AB0
39323712860E6C69464197D85029A7016B9E27EA691541858A3A09245F3EBEA3
97D23569B9353DAEBA32FB729018051AE07DA42F1E9A03FF2F0432694966DC4B
593C827C8164283C1F60CF883623CC1FE6F39CBEBC210E8FEA9314A38595C557
A1F51FF8AB0C6A3D7D810E2C323B29582A112AA120A1B77304C21C3695A3E51A
4D2816F0EF84D9CBB1828C35372CB6C4D5573EC6376D9CC7EEB5BFC0F0BA95BA
96449F07566BE99B9B2953D2F45278827D67AF96467B833094982D75A24BACD1
9972D52F6EC4C88AD9287BEB83DE1FA33A5B4B73BFB790C6AB3F0CB5296C5598
33CE07833AB025340F4F6AA5C6335C94E62D904A62992EC29C3E1E48AF298B47
44A86A5C182C775FD88739104BC9D21208C9D96924A2210EE5C47A9C1C72A389
89E362FE49AFBA5490A921D8159995F0713DD2E56BD908147F074DC352A566CD
BA4F95651C73D2095E733E12524E3432E41A95FFBA9FD547EE6DD99E0E709137
D36DEDE8EC93AD7CF65DC809DD8819259E50CC4A6CBA05FE6657E9BDBD242351
ABA6B8E39F1EA04945FE11816003AF5D33878F36140CE83AF772E98E47F8C391
50F72A4643EAB55C37ED477D88C55F3F771C92F9734F818CE9041A56B65BA6CC
ABB1B6DB11891BD1922FD2AD96572EDC1D38AF0BE702E93EF3E18EE5ACEDB6F2
857C3440B4F4612C3EC0A833CFF415C87F778AFA1853891D36256BE6B7270C6A
4E8B2192AAD962947869C791CAAE0C9C02272251C12B78EE577D8A762BA7F4CB
9B9E49DCB9C2FE23F95BDF8259FFB3D17BD9361F9311CA358EE151FE11397AB5
ADE76CE6370BC0549607A5C197E9C5B3B8A24BFB08B8F2EE2889A91CBB59940B
AC40E62669110C2566BF6C47932F6D812BA1FCD778D9B1F90E99CBD237994C2A
4A0853A89ADABC2FA867229E4DD7BABE12A04862AE15040A3CD5BCD7DEA5C41A
E4D665DC15EEC30EE42073A775B724352908412E9F88D6BCDC48944568FFA7D9
85E11602AF14E1B09587B642BC3F464073B9DE40B505BBA694A94C338C624B07
A96B01E0DE082CC463FC7E195218323BD2B5D0CEB1B6C76F78588DB2DFB10A85
F4713F9831E210045163E631E1EA781617E87E16B67275D40BFC75A00CC016DA
5DDD181ACAF62AFB43E8B20F7F58B3B40AD7822FF15BD6E312AA883B649F5811
2A9AC50D73328D62F8A39F3B6D66D8802DA1F900A959AA7336CA246421A2C89D
464D9F27D7DCAAB8EAC4DDA378B2861CD9D6C2AFE105F7CCEEB4F372F813842D
8C9349F8A6EF41F5FE5D5FDB73DA669586C277ED905B8A9C04E483E5C95C4336
5A9413926B06D7F3C5E813FDEA3F7336673587ADA8EDA9E004AC072379B02337
378B5DBBCFF54425A323BA37099E74760F4457758094899B4C2337097DC1D844
103529B1DB26A8905483190368C84521B99A873B9CA57D3F96386E6BD2D191E1
D37D9BD147A2D7C02A7C57E754566B24366629B82565FECE439ECAC9AB95C30A
415EA912666CE12185D365B7D93B19B030CD50C324BAA2C7919C7ED9551AF9E6
4136595A4291DEC1969BCA9E9231BAD004221E8DF75DAF67019BA8CBB6D8E921
DB6DF9EA37C3432DE061892120305C7B31F664FCC71C50AD017B34F6A45B5CDB
B25AFC61F4DFDC3180312778CF67B2F97F0BEBF538902B36B38B340D4F689280
051350294B1A1AE15384A1E97468F4EBEB4FAD34F431914D7888D37D3ED88080
81121D75193104106F14731AD27E2A4F8682AA44277870F80B4CDBD2435A5FF7
4C4CD4F9A08F5D50F67AB2C8E063EBF4E4CF1DD36169C0597E3D2F8F020844CF
77E73B7B02A4AC2E99D7CA6DF8859A7CE1E2E9F33CF280300C58A8579E753B49
4B38EC3BB6A05509679B7B49B4527D35013B3C7DB06D7FC9FCAD288AA37ECD2E
5011562D8643D9343CCFEEA50E70A0C68574A870DEE610AFF01B70516F99DF51
7D86E095AF2D26974F1AA0A527E70D5160EF0D594A47C8CDBDB1FE6551197360
49C6A74B413674BB8A66D52E67A785CAC33495EC9D21C4CE14300EAC92BC3C6E
37187A3432F0952C6478E68E5B5F9EB0EE200E98FF9179C285529FFA28408899
9427877DB51D657291B622DA725E1B2CE565329200D7F63A5DBCE6104C151E28
0234C27AAC18174E591665EC79C4912CF98EC2C8739FDA663D4EFD951AF70E37
14286E1A736D3A7060BF528C14BD80CAEC7A2C1522CD0D8377501208EB6C5031
C3C0FD608077329906E0BD45BD565808CA45B15B74F6A656CD9A92101DD4BB05
49AA9417241CF299CA003C6411F1CEAC89AA79E062ED1F65BC130F2E33660BE0
95222432081EA1A97527D1A980C9E8CAB7962A6211748C00ED2908064D7EEC75
8ADC8B25767A88BCC4105113416F344727F674F8AF83051E633A89700E2B1523
5975B4C63CC15D2E50D443EBFF9E13E90690A80D5AB87199BE3F169FDA666BCD
782E905ED59FD24183CED9A5330DF35A8B2F42B3BE070E4C29FA601A0C41F26C
9EEF54C475B04C68706140B726E16F32C7C6C91F3807B5B3C9CC77A38B21E69E
DCC6FEDC58209356694471221CE5371894D25F4DC018C7A7DE986AF9C3713FAF
0BD537D333DC0476F44169F73DE2E403651910434F1BB1EFA7971DA0DCFE9B5D
325700D9B26E3550756AC3FBD7FC47280A457AB8D278187F8A3C06701FF18EEA
D01717353B8EA0C0470DB9017841F80D650A466608F2EC64C6865768902429AA
93C2BF15679AF3CB348F4D644C7FB66F80EC662C7BFFAE00592D29A223D84C6F
0DB084BA1633BB516871CC62974DFD67A8B3DC33BE604E7200917E67A77E5041
0E933D5134B4E9C342DE9B5D747199CFD6EF9DDB3EBB697980D82282580A8436
EAAC9EED5F17E27EA5DF50A35A7075E00D9926DAD6218E48555A7919AF750753
A993A655313CA47D0576A2D27986EF7A448AAE76302E9814745D6F8C0F0E77E5
5AEDBA7E157441A3EE8809E198A3AF251B26DDD2F845133ECD1C7742A6F2AB6C
93ABD896DF3CD83F1D9BCC58086636C26680457D5228C9570E14AA0E187A9005
16756900DA394705F3A07656A37B88BE14349A494114C4FBB4451880C8361518
CDC5C6D25BE1DEFFD1652125F6CC80768216AE755590CD418DF3783F0BE8052D
9F779C6DC4CF961F3F23BD0EADC911C844FBE1F08749CCC7E9FB3275E05CC867
D02FDD084036E07CFC9BD41F38A747AD1C099CDF65F4723ADEC504ACA5C8B79E
35D3EC565902396934F43A9602F8922110202F89EF85E132D3550B1FBADA15B8
71D8EE0CB393AA12FA5C07C2A187D05F72A93A4D6546B37C297E1768DF58AFBA
DE440DEF7B245114817D470AA113E433C1276FCD5B66F253CE4C7B265938849F
58999D8F7A8F5C99C7CD63247255C18060108F750A1D87AB0EB973E59F64D27B
8E50996E0830FD37F58C085F63C61AF13FC15C5D90B2BD779D906B8BADE37F01
FA2F71DCA50E7B9A2B70BDBE4C835D189CB8B3D5B33C81B70D0D692A4472F253
CC99AA86AB604EA315DB9160F601BEA09A8C2BC8A3468D8299DF136809E00862
A766C9EFF33F064F854C19AFBAD6F6876AA8C51A929465F252D4129762F06952
A126F13BC5A209C233BB8359C4DF9480EF2BF7090DAFBF7A6D42CCA1248C03BE
1717D7FD950052197F5F12FD4A06101374A8E0125C5FA0410F93C1D23B351B1D
B527FF7796E3F299104F2A0CEA36B2AD4F8FF2CC4DC164591ED471D736F78CEE
9E35BEDB388CBEBBC6BA825357C626C296DA7B716AFF38AE20D502B76E034A57
70D5FE12360D7A97E2CEB74F92E3379E44D38E481C438A7450DC662CB6EA4995
542C21451924D453510DD84F1617FD23040BDEE56B0CB46248C243773ECE4F2E
9C7D6D24EB2AACDF1BFD141853115A74AC880A984BD7F0A904361496EA8CCECC
062506930DFF22B41DDC21860109495EAEAB26856B9B6953A354759A1FB477E6
9CC7C005AB769DF3B730B09F094177350836E321242C0464F5F9E36595E8C717
F4769FE68C91F0EA8DB7DC913BE7E8E3329AC5B99E8B77097552E83DEB4CDAC9
AFB14B71CD8CE6810839B8DF6168DB97723611B84BF16B56EA8A26505305F0AE
D710B70DB98F3D7FC0D4926AEB0370408AB356D9BE79383EC5C58F2D85852D3F
92DD582045B8E77FCD7ECA49AB372F16E89943F911F1C2C8602A8AD4713D71E0
C1F4EC6DE2F3313D496B2CA5DE8769B9DEC2AD33BD22E2B074BAE15B8E19BB3B
94307672ECDD4FCACAEF0BB284314EEC35F1B798F395A4FF0D78F064C7597901
2EE97A7BBFBDB968668AC98DA02BF3A1F23C777F1954FACB4F4C95926BE0C891
9B3B0FAB9E4ED8BE4733E4BBCCAE2E14AED5631E65084A99A8E21FC5118FD1EA
F6D95938F07FE31148BB286298C98BCF2CB88F3B51DB71BA2320639A07358E84
6C6D30AA1AD2E91846D59CBA71DAFD8C6ECC979AFFF41FECA9831FB45F46ED28
795629ABC9ED13C0F60D800CB81F96A01A1BAC92F3899761CFEA00B84DD02512
0A7EA45B3737761EA25B3DBBA97EDB46F777FE988407242E1DD3A3526F84C085
B8935E30EA14ED7D8D31A47101CEC47BBA9CFC991784C3B9D0025539DD5651BD
8A9A8128A761C611BD2F28ADF3239C38A572F75E5B35772CF70D487C5BDBB813
E2B337D86FEDD3BF6DDE186C33E81CEF8A4DECA2385B5CCFEDDDABD6384F2EF4
8DCDFF657C7C51BAB2DC8B1FD86DB2BE163345A4AE5D7A422DF81429B0E92879
4E1AD3BBEE16198B34D550ADB1B9C0320495C03C2951953E56E8BD5254DA60C2
4C762AF31ABFDE1C08A2E587032A30AB6FDC2B7C6F527B8CE5458F6E90EEE604
A7FEBD7DA2BAD9955F90617AB4FCE5B156C70AE50905C7FB54DE82D13986CCD2
20DE2B76118E64230F4239E070AC20EC37DF13A42063509B590DC7A0F4F596EB
0DC0E85CDCBF57C3297BE55679C27C8BC326F81AC0F95083F8B62F20C4FAC2ED
B58F3B440F59C6A679777F9DACE21496725F3C93A9E75BE1A5054F75C2C500BA
05A48C3185B03E22F25005F95921386F77E70157396B3A7D11DBAD5B480A73A2
51CDFDEB4E2B97C06B92363268B91B238742F4E9501BE05143FB3A1BE505BD63
5E3EBA03CF35A6C298814C1DCCCC68CD7A8D9921DE23966EC4DF7DCCAF6BBE81
0AB671474056FB7EAAF32E97D2FB7B97BFF1400529F2CE8AD291B448420FE634
4878D0FFDB2DF82A0A0F462E6DCF949B68CBC87C46865E8D72B886DB752C171F
A987906F28258F198746A4910998E51C5834149B592C9CFF4EBE00EE96AD4330
AF510CE4633D4A22C9DD160E032FEC71DAA4536B71214C1E055F9FA63A290ABA
0C77AE606E03EA28E50A9ECA5D95914146A3323BCEEE406CEF56F99123DB8230
F5DC7E15E2B7C22305E1AFCC2219346F233A765DF6990DE4E942526BB8FE7F98
5D56B3A6F1B084C8850F366FF0AFF6462AC37243ABA0F29986716F3EF1290840
29829D23FCD1CBDF12FF3DCCC4C7FF31B75D43BC91CA693325650B536DFE844A
AF06BF0B15B5F4839B4C731020AE1629CA0BDCD04236AF2C5AFF42B6A8A19BB1
F2171682E86970679902D0AB3D48C1ADA972E9DD3F05962D217EC17D0DC430F8
3F802CAE92E72A3C63F764AC2B9C6014CDEACDAFC3864ABEA8024876F44017FF
8468FC1E7019A7459D64C23968EEABAD9CBA960ED9B44D9C7730054012B1C0CC
807C46854D85925E0F5CC4535788BE3A5D64861D027EC365991DA0D13CBE5B62
6C1D9D5215574AF6FA959D4A06FD36A43F91CC64937861A02627430DC0F45401
4D541A77D603B340FC442D9E466716ACE0E71EFA30F8097E18ECFE431B1EA4E2
172D9061DE29C36104518E38B20D4B81654045BA457817FEA68E0B378EE6A3C2
CB71AEC40CEC4336207DFB4D07A0ADD08EFDF92DA0B1B3A34E9B25B2573D645B
D7B2E5F80AF7BE54C3A69F5782A67D488AE9F89C0A5CEE5C3024B7C8C93D320F
82ABD51855EE7F39186735E004781310748B37B918768C1D3035BB820FC42D16
3B096D2175ADE51AADE0338B4951D742E7E0E3AF1B6CAFA604F6CFDF127ABC40
0D38B0F91CEC5049142FCD173179210FBA9F8F5DAEC2781D6381A74CA50DF750
1AC6CCE8C4FB96190BCC42FFB593697B786E1DF1C95BAF24924C40346D22AE61
1FBA09CD421ABE3123DF843875E1BE4992292CCAE72A9D41A40B32EC7B7C588E
4CBB463EF40A0DE11376C165FF5F31F10156CFD7723FC8301A8050E0A3B3FB25
E346314FFEFC997524576CBFB37F0BBF31AE004E03EA9E510D7638A03756E045
6A6382E8ABBF84D1D3CF9887CDB3B06480D193CA26BACEEFD3FA037DFEC0C64D
D4F6BAA89974A966B28A6B82BC21F985577030C5C80F1931D11BF29B586C90AE
03D2E01475CB2DF1A4FEF14C72A42F42C1692555C6F78F7080284C56D4AAD2A6
C4E2694396EFBF48E6B63607B7BFA550A5AAE6A7712815FB7669F3C215BFF521
1C42615698A4070C85B8F56A4BB100EE671CA4830C28514CB2AA90CFE78300B9
3717D5F1DA3FDF9630BD63798CCD4D8AA10B7524A02FDD152AD19C3071182033
940F0330BEB731FB396D1DB0C166AD60B4360C8A18AEBD751E0DC74D4F27CCD9
47984A0A00E3FAD0337943F2FA7C0060D6DA6135DB0972F0E52AA5FD1F2CA97E
C9892E1C752B0D2E5EF32A9389C99AD2A983CEA6E181F0CA92520D6DB4C9E984
E55412A69AA00CCEA600D5AE8FD0B56D7BC70F1633905BBAF11743A058E690D2
83F5A03DD275F8E73E06F576FE2972E19865F25B848EEF4CF8AA41B3E38BE654
BA19230546894083878761409C10A2CF284654187F5974B1DF0E95CE0D8446D9
112E3946EDD14A580DC6C6B3482BAAB8F0D504F5D70983D0F32D8263D8993078
21D43DD499CB48CA11A328C1E4964613E6316D07A16427417BE87ABA12CDDD98
0006883EF8030918EAFA931D7FA445B447B1BA787F5DEF6306EA5CF2ACBE732E
B1EA2D06DE9DD31D3B93E95444EA1CA84A6AFF1EE1E7E511B06F9F85908BBAED
C129DB91D5D4F19876781559140B163D462DD4961A6133C874622A0E66980AD5
33AA093932649E33D267FEC003D2BEB3C9735461974EBFB41DB2C17A55FE637D
263F9903725C4D817FC6F98E3D4F14F40B1B1A29F33182D462A75B442ACDBE2B
F9AA9FC3DC2CAB97F476CCE0699F2413B0F41D7BB983A1B1062410FB5976117C
40BB852AA15A858AFF669EE4D93E78082F046ACC25AB33BA0BE9B0CCAD2F7D0F
CB484C68F744815FE00CF383A936F98715B3C02E614F86A8D9DE041D35B9E1BF
A5A71F7F5DFD3342E0709761F2B9D870C9FDB8D418B6491D333CCE5E40845D57
3B8CB62C113657BAC98B7182873FD7866F5F3CD658BF331B9A3E482DBA2FD0E4
D3E1DB45499BEA3AB1B856CACB2270E1A3C5015913D4198673CBC573DB75B8ED
B92F92A716CE9C38601313FC99628E4AF00E4F5F573753E314423F7B49923F20
AE695BE0FC0FA032F3E898BC127CC891BA1C6560F100F3B91AF20606409867D4
049A43A13D3E64F862F76405E457F31CBDDFA23EB58C036EE89251243053817C
05992BDA285DBA084B07B52FC518C057062F590874B51EE4618BFD16B7F5B42F
4980D153A75686356D1C67ABA2BC3269D6A126FCA165C7B208421B716C92F8F1
C250AB200178915FB6B168A06C4441D64B318A6D71DA7E411C9F5421C6EC5195
20C18D262865AB0D25F0C7707530D9B2B3A4310DC0BB82815BFACE3CF9A839B0
60E16610D046F08D87B21C4902147580CFB3AD1F3E9BC222F7C203D51B5D1E20
FA8FABB1DB74F026A093B2930B67DF6042C7AD1EE269C76EABAAA4A5B58BEAA5
41777E6BF32543803D5CD73367AFA335D46E70EF4350E426F0839819D4B882B2
78DB2F2643841E56DA897E5106E23D61BD6DBDA5BD471958B14A380AE99EBD16
F83A563C30C2B19AFFC0EF4A323F1895B30CE067ED27A929A72E6783EB5DD9EC
C1EB5EA6BD62A710A5FE578FD3CB465B000611F4194006CF23528669461405AE
107BF52A9740A38E089E54FE11C5FE7EB2176E2DDAD0D9B5C765BDAA1C2421A8
D524ED29ED5FE335A8E019A86ADFCF237121A84A4E40BF752AF7B48EAB59B5C4
6270CA2B2F685134D18F4F542A3766307CDF942F49885CE299340A25049188B9
D91BF7F718A5BEE8EB6FACFFBB03D5BDB1A26E1D776DFF23CA0FA7751CE4928C
72DD4F7535108F4F12C5C8C59D883E3C360B408B147B02F9F9ACEDAD3963331F
E3DF1B322F8D206356128500F033968602CED6B3F33CA08EA3E7806A07F45EEC
C429124C666DF8874695F6EE1AAA5C14C067954C3C1827403719C3FE3885386E
04321CEAEF45E9FFD8301750D7699873CFFF35161099D8600E85082D3B71AE24
62622031E599A8443D5BBDE055A3C91BA542C756D987E92BA01D973F3194ADF4
EE4B6085F6143AE324E231FE400D9CB0A42AA06BB65404D97F87C49EBAAA1A96
ABC7B8BAE67C7B8D07951869A08B7F24E45978B551F340198AA138B59EECB77C
2531E14222F880124C7FDC242BB2FF93496ADEA83D9528E98064CB6ADD20FFF5
FBFC2B0818EC3833147178C68532DFCA84BE9CEBDF77588CBD14BCBBED81EB7C
A1B038940FF79878C696556032B9BD3C1F9BABE80F07C572118D36FD1BAB93FE
AF893CEC4B1E1900A76A4EA0DD947BC7F27976674D2290A06516EF2275836FD2
EEEAF1D540A6E2D5ECC093A02121B76EC2C16FCFFF93854A5F323A9F4D1FD518
AD46880648C6B91D03A510E1EF4593FE951954F01AC80A4487EA093D22002184
A69DDB81D040FEC6A54664BF501760D40D48551024207243353042FD4DBEAE5C
A2A731D3734E2FFDCC00A73C8F22995D8E5427EB2089CF1F5DD1C176E25A0AF7
E5352C9552A95DAF701DD030C716319E2E5DFB51B77D4D60E10F47ECA14F497D
6304C2623FC1812BF6CC3C559792117658BAC201C0A6758EAF044E6B744E8855
1EF8602A3AD1CDB9346835DCCE14513D89119F3036E4A001484524925A70ED96
BE19C12241FF59C55AE6BEE67B673F601635DF7EB18AADA124A4C5E39311C32C
BC5803A57840E9FB4C379F7E21D28E7BFB2F1A6DA18084284342B1EA3EABE48E
ED7829F5CDDD28F3AAF823FE4127BB953BC4CC9145439F037D9A05CA040E4A31
69BE1AF826222721C8C3C811B6DACD58AD351F40CE5CB7AF2F373DFD12EF11A5
126C2AF3A78CF1E1A21CB685F3283487A4D5E56A3E51ED68C581A7B80FE7259E
F7AA050BC444E7BEC619DD75BF267973AD7EDA323C2A13F940124436EF7D1996
A3AA80D4A3297D60180C3160CA6B52D932AD368EA6EFC295F74534672097298E
1FC4EC39E1589A80554E9CD49AB2712CE3332F8B95113AFE30406AAB5035E1A9
B3DC8496D848F2EB93055FD1D01028E807D8D162F7EF181E1C296D391A7E47F8
1899B3C5179BE1528D2C035F25CDB4CEC40D2EC00C208DE3B014ED016FFB229C
3A2871358801F60F53CF58CEA8A608C62E726A93CB582B4ADB4D9B37293CDB33
59BD3AA254D8CB0CDF03F35C14FEE96BAA9F08869B41
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 65 /A put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EED3A0353A7
E13321F7E480062A971611704D93A866C29AE2DEE5EA872F5F35A2686E37695C
ECBC6F6F2CE5F46491EE865739B0D8FEA41E1070870F50E2EEC5F10542A071E1
A861CC30A769DAA4DDF8CC0CCBACF1FAF00FAF91D446CE54AC20A4B455D06578
4E94A41F05BFCB0D4DC15FC33FCA6D7A069374A8D5255E66B9CE2DCCE30A32F4
E4E3E1A4E806B2B0538F96B28F8CEA61D08FE29E46A3635D2A68D6EBB3E541EA
15873470C0FEC5CB9136F76438B74ACAD2ED902F111E83C0424B11FEBF65E8ED
909C07B0E83CB291334035208F29C581597EA1C9600F12E33FD4BDA9E09F9749
F3660D35CB62A5E2AB06A3FD052D293426556F00AD40A4C1E46304F281FA5855
893C628BE4F261C7D1708929CA2203EEDB9E8FCE2E4AF1F3B740754ABEAA8088
1D2272C1B9691FB5D5274499BC130571D38567245A095F8C91294627FFAFF039
9CCEB87FA510E0D6D005D4098EA5321DA1FA07CC1B2036139C96790BA05E28DC
B5D0BBF13B545BF86C23FC4AFC93062D14EF1B8897DF2D441935A0C19E7D67C5
807A416228C9131A963E18B6332AB35D35E02407B10D04DBB6258A37008484F2
7750EAEAE17A63DC636EE6CEAE5EF32B95405D856397C843B2B7FA307EB591FC
6D314D57ABF24378427684B6F2D502D2B6E447A751622E6B976D71E22D7C32DD
6A251141C84EDDAF6793DADCAE9B1E248D02EA353EA834E1F86079F3BBC478D2
E21532AE1694E5C1EA3D87459FCA9ED5123D2C60F9DE5EF281ACE8DFD6D48A54
5300D111C681DF8126C4B60E9498D76BBC666584D25A8599717F9EF91A6AFFBD
A8F9142D947AEF115AA3D597D94A23BAB91561D07F39A8412546A9758D208D0B
C66C9EF7240DC22B6DC6A43E7842920D073CEFD986A0584E020CB5105DD5E822
EFA8FC9237938FF8642BD551DF6E19A3D52FDFDCA2F917E5CBA23CCBA7C46C15
7E3088F4D1C99603A83EA8F1EB48AC809BE050BAD39813DCF287E7B822B33BB5
F6C3B4FD9077D2E0928A299F0909BBDE922D6D24688763EBDBAC71788DAF6CF1
06DFF90F450E7B24F67A24E471DE8A603B1C32EA6C208D707D3760F03F7EC02C
318656FBC3584D57470B2D3A514C03BBBDF82DA6AFC55AC786BB5451BFB6C5EC
DAD7BAA8CECDD3223698EC7F74892831CCB18FB0F415637D9DA636BBB8BCC351
82826B99DC9B1615E5C5BF799992D38EB90E0C9B8C618D455B3B13A9AA02AAB3
988B5D2EC5CDC1E38E2569AA820FF7E1C13C1602986A0368C621CB4D64EB6FDC
B0B59F886B0088ADD3CBB1CE596A0ABDC4425AC542329BC100C1807106FE3934
4289918F9AE3B5879B9FFDAC29EB79E9013C1AB1EC420A711AA2C7BC31BEFEC6
72A4C0C507B95604F86413C3C0319C92357DFA5DDE5023B6ED80B20CE24ED96E
7E675E861F7DD50F449C4ECF9E1014A61A0F811FFAADAB3C186FE29E3E66DBD3
1FFFE546617BDA4097FCB8FCB635C4EC68C407654A8C311D3B3C8F5901B2AC78
5B222E5DE318C7F2BD6AE190912DAC612F4E4167E736551FA0CE8DD33A822717
7D0BB45B4363140A382AD6E69933719C67FB0A5D8304CE37D3D7087BBCDACCD1
63BB78A3058FB43B2A8F7FA3DA0D945FEE622F4D0B4AD4AC686544C392085334
6594F0D3026F4900770B39B288667A55360E3E2A83100A7477F0591A23CFC73E
FC3F8CDBC5B425EC8BA4590DD3555C2E4BB60197FBB2324FC9E50EA445684F4A
277165512AB4F8A69FE06471A56457D782416D6696AC8645E10FDD80D52109B4
D002FFA831ECA28E1110862C783931111D2A9DAC0C40ABD036DEF24CBB5D6143
C9E43A6C709A173CB144791FAA007EC923C06D444BB49A80CA4750694D531C7A
D5E26E78E543F2B25024EA04802E5C9CC088121442117B13C26AABF023D4D670
6CCC054637BAD9B23E06267D9AB0480ED8F243C7A7491600143BD6755257F03D
F774EBF4D0C46F9C2DCC30A54D68D3C20766D3626CD8D71DCD638A3E49FFCA74
73C3649713E087DF8DD4B02241AB3B1541899171BC12C8AB82C773B6CE6C90F7
420DB2B423364F9C248A2A6CE0AE8962E8A8CB29C6584BD23C0C34D077E4EEED
50C5418368C6A66144F836F8EC1355A3D5A90E3D814023EB4F891C16B74BF2B1
6AAD010FEFC56614D5069455502468423F1EDC8604D5C59F5F2BCC642431F1AD
8B5DA726E20237A760C8188E4A6126AF013C9B494EBA7C4042809CB70192A4B7
22775DB1D43ED534CE92916843FD10112D0E41FEC653F131CB4AD5EE08CA3293
FA4F4C6B8F0469B1945310567A38E88190C275BBDE315A376C9A242A980498E3
00FFE6F8E2E7B18B335E025A19848C24F7F4988D4EE57835BA400792D78047E8
507EF8D680C75CDFE91A4647903661FDCE35099B7A55142692466EB5ED58757A
D16BD6D3CE13951EB7354A48713B42460E0FF5C38EE0EF4E5A8928286996E809
92529537D853684D4F766F05E081E734D13B19E8A308C26CF93A47C84A11EAD2
AB8CD894DBA90BBEACE9B3EB9340B6A5BA64C4D6B881DFC68795803E3EF66CDF
B7D087E55C693253AE84FCC327D55C108113A3F3844CFB23383C253D845D744B
DC351692DCBBE8F7A15A8E8B3613A7856D01915A18990DF3C720B0D29ED2CB85
665B386C32DD657BF9AD77E9264B562FF7D622DC211DCF8A9302D6F53E6341AE
3AD5FEC7686C2A2701DFDDEDCA8840F7F07013415994935857D3B7C2303BC6EF
FA63502FC2EC89888A76F521905BD83378859C1964FB86E4B8F635C6E38A2755
43CF34E3339CE0A503C1E54FE1D93531AF0A79ED0DBA55945C00273D45F494E6
E0F722252468657E7AF61DA33C96F781ABED36F25DEAC79AB19407873DF4788A
7243C304462120E1AF0B2946D52E4F935AE282703E9ED9F7B1D53CB111CC450B
20FF79C60B349DA45FA446777EE13D52536782BB1651EBBD4FD4E4944D541ABE
B971EBBE33744DDD810F6D93F2009E257B3CE68F6B421CBB3AF8FB65BD635FAF
47BECD36D6DEBA7D6DFF27B073FA9A05608342F06B1C0D4DDC09B52176ADCB3B
D73F4AB9B7469F322010950F09F9A33B97FC724FC016D82C7BA2A2C06625B617
9D34BFA4B666ADB00E6BA38B086E21AB575A67538AF5BE10DDD3AAD09C6CC747
297F81C2EA48D84BACF8F9C49C131856C72A305D700EB1DC10569BF818E925FA
B267FF458A54ED2B66280D89B1910395DA5B985307A191CF753BD59213A33CC2
82AF28847DC745708829DDEECCEFF6C166BFD9760C4E7E4EC364FB38DA675C77
34AE8780C18A0974DA54A0BE85ADFAA567A62981CAC27A2034EC2902414ED127
0C09689845DCBDE19DE7CC5B241796A16351D5326234E42AE5E6EB20DDD56092
0727D38A363FF74F1E3489A8B2E403E3D59D95A0E7433E30AAA917189A695DB3
393C8BFB6948092DF8A201EB1A5CC23035E172313F9F0A1A12B65F4B0D0787D0
106B526C7A7FFF421529C42F0E6B37B59844F8632FD405BAC2E4D0198A52926F
3E72759E102C4F962081FAAAE5EB7A34D7640F5016E9E85E3F650948A81AC499
E86D9C41EC8DE17BC8AFD3019886C7989DC25F0E33C9C744AF8C5ACF3606ADA3
6605C4DB0AD3A82FE3ACAFD5ECB23817BF2669EA986446355459F5E89677AD8A
C67E5D854D10A22EBF7FC936C262EDF1036E98D649A535EBF5FD0732FE09CDD8
A0CD946A8CF717F054374DF21FF22B39094898B8CEBD1781D89B015A52FFD320
3523189841F07E81764507E20F323FB706E217695434566A25ADCFD70ABE7B34
35C49BCE43DB226F1F695D67A759EFCFB4821072B4524644CE886A0BDD7F77BF
E735A53DBA3147C75802C442AA1FF31779ADD279F3B5C467494EA46A7F54600F
7D11821B840DAA4F55207A45F1EC0DE65FD327709C23E9DE7ED87144AC78CC27
6D23ED5F9B4C6962134EC8ABCF58E962BC12209CB811C3B842DDF39F8F2073FC
9C8AEB731C4077D5C794AF91BD7368DF053BA834EE7338350FB5A9612F74AC68
F2F9C9E886F65CD3173C035BAB9DDABDDA3A32762622A488C3F3BFA09575E999
971AF1FBDE3C8AC9469C981F34F3C8079891F1CB5A0D99B32B46D206FDB7A007
1D603F04D409E4BFF1DF64BB16B7938E1D2245C493B521B9290DAC62AB043DA7
BDB8D61EA9AB2F55A5B8D3560C8FFDC0DE02FD852C88C70FCF0BEC111AC60B22
01E5C4A77DFA9B7829540D194B9F93E9A19D8B9A5DED5B577D05450B5A5009B2
6652C61E80986A357CDE027CA248ED933CD64A2896F944CA0B296845D48913C4
121477126E3116047073089EA9A07E0D0AB38BD0AF9776015BFCD2990B97AC41
D874F84869708FFF5728203828FEED0AF87F757747BB82DDD2349857AAF80F09
73FFAF2B38B07C736052B8F31272FA8B015D395441C1BE740E2DA638F186CB37
B0368970D1A051369E99BA0A7F5378CA69F7877DA2F2D9D6FA23EE0E4E80370B
70709DE97AAAB9E5C62D81070AB59B3D1965ED5C1095F0062BBB80C2ACBFE271
27E1271AB2A83F3068599333AA1E47A08C5A40B1A80A98E9135A6DD9A4C42F24
7F3249F272E642FA6AD6EA320C09B48C1BBAB0338E4B69A320FFDFE46A0C55BA
19D3F4E3D4CF58C3D22AA88BED7ED2C1D35C900FF7F4ADE809BA154C2704296E
C6292A616288B3DE80AD760E15B2885507BE674F819D358010D99A3FB9858187
3BEC9C56FFD3FB9F833B486C67BCC9DA0164E3E64FBCBE8986D51CB6D0B60738
104ACEB8AEE8EC079C912387B950FF83FFD8ADCF0A1208D9E5DF9FD8A8622883
6D5B8A5BF517999628755A9F434610418DD729C9350F77CE81B1817A612D9B85
9A80C766E80487F07AD17A0B33DD9666701A95D249F10C47BC4CC6B35EE6EE02
F6170362A96E0BE6FED9A0D2C082746F71CC2065C513EF0CBFD5D16709E3BDB9
62305630AF13DC818C4B3FC9878530E63F97D90606CDE169EC042EC1DDFF71BE
18D42ED33AF007F8B03A2ED33C5F0F6977674167ECD77A82CC5E6E2E13726517
0802AAE99E76102AE2AC1715D9709E5F20EA7B96080B4A75DD241C4819AE6E05
313BAD813D819BED8152274EA148C34D8C9E3EC59A18DDC268BB2072C276265D
E25FD5E4896DCD4D39194F2322327E2C436717894B601500B9C576FE80D57042
083823A26C52EB169A8BF49F0FC0DB58746535375B3C79FA267AA8A24A530A7A
812FCC57759A1ED265C68CBC2CF63387E318548D79C23597DF93CBA6EEDDC10F
DACBA5092D4FA4475962380F2D5064B72916FA7EEA10ACA201A2849DAC58C61B
011A01E1CCEC327D567BE773C935EF4B027E0BB2AEDFD2A76C6D3C0ACE6E4267
627366B8A7705A17D5BF004130AC87903095F120EC82325C4BF77F9D79D9A27D
F91C981EB0122C35150C0068CE15D88A879127D25BFAE94833684D64D11B5FEA
9B0C74040842A8AEC17F1B2E773A302570ABB14BD239A7D6C0F7FF5A11A69945
2122A57C3F9253DEBA01461BE89913A63EE4C357AC02F67439A6A7961FDC73DE
6614BD21032CC0AD386B6269CD2B1D39EDD08294922C38C36DE3876A4425BBCE
AD4CF2408FC205A9461D458261F1AE28557C370590A8ED9326D683B79B465FBD
89DEAD0D000F11A216D1D1DA1099B5C5C8F4AB25D141E55A518276712E156F9D
687C5527DABC8CF78258D32A0B2A1304E5A9B6D93549B49FFB23B41BC2CE7566
981CA7D44D04D5CC4210F86F1EAC4C33479C39001B5DB469C96121962F1F8E68
C37F70DB6804243CCDF5FA3A1DDB50E2325392ADAFDC70921966B8660E4DA5E6
6AD117C927E9AF71F24282E2336E6CAF1C66E7ECB08C5DB2FD45AF5D48B6DF9F
0AE101233FAB8AE78DF78E645D454454C65BBACB4CF9A8F94838ECABD911FCC4
61A55A1C042F2FC6601C2F29EBF2220200AAA706D0F7706B3B41D3D1A806D808
D71A0930218E6B25E840A5947EF762EA271E2C2B35C654DBCE16B6316F35B137
F5D11CC06516D70C388151211DA48CA341695F3CBAD6FBF736AD2401E95FD2FA
2EFFF2A963F788CF6435E6465F9DCAC764EFE0254D1FD4F92A447E4CCDB18B09
2D3691BEBA258846CFB4D3F7A2170A5DA08A332CDE23EC66D655ABF04627FB08
B7EC827D900BCCF39C2F0C6008542A12B8E1214C3BA3B854C245569A49FF8581
7F829EA9A379971E76A47C891133A73E60B28F58466553AC9671D84078A2860A
63C0A4D884FBB2CAF86E21E4E38FF414988C57B34F1224FDA50DE1CE2952992B
B2B1A63B7CB75A144F987D0C55842A5AE52C9BD974DDD26828ABD01D90C53F7B
4E987B7EF8C9F265FBC2B6BAC170EF585A2FDD4FDA3C5BCB1C75CECAD0E0D5A4
27C93ACEB0D1E3382BD7B06D5C3F179A7CCCC53A76300B6023DFAD45A70EAD2C
E056BEC7371441A7A3623CD4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 63 /question put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 80 /P put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6EFCF9F0831780165A3374B17
88EE15E86A40B16BDFB75FF3B73127BA45BC6E1F752B9A508639FC3EAE24DD7F
3CAE82407719F13E819159309FAEFEE5BEEADCBDB4CA8582DAF2809A41072FD8
17E7072D80C54F98BC9FA0E838D5A0C2E786EE877C26D8A70FA58B9ABBDA9D01
8F6210E7BD4F9692C85B7E091D1B11EFF780EF4B2888A30088C3BA59ECCC84F3
D535D42A2B4D2FB2DC85BC4B67FC0FDEA295ED6C560AEA0C197F70B0768E9877
8129559E21990B6198165F6D2522BC581A654FBD2302F966BCD7EB71B77E4E72
828623E396AF33D5C74F9FCDE924345ACF80F7A1C54DFE4DEC7A458EB6620FCB
B071A6423D76904CFE0B6CD0E8188FCEC9E8E905E81F0F65C3D2C8D0416D469F
4616E6D3C1465B6AD13CD4C80EA9687CDAFC60A5A90587C8145E81C703488D0E
FD6A031E2E2AF99D00E2F470E5FB7FFADED866A12AF30D02B23DC34695E857C5
84E49123971CF842C7274B2C4F45D414ACBCAB2E6C081130B7FE6EE5A2B68CCE
3B5263A7148C25025F42284AFF0CFAB6A51F5110A2B823830A18F6C1E534A7BA
83FA92A8CCCA5017610220099281355A63AB291C58486D0F5214D39DC749FDE9
CEDB11C37527459D97270E5173B546C4C89E1202EA90E36BAD732922CA935F13
8D3709DF4506099131DF1FBADFEB0BA107AD25CF318D76A3885E4DF6F4ACE158
DDDFA4DA0AF1F007A09CCEAB6051CBF28DB6C0EAA8971200C9C180BF414D26CD
683A6307ABB679FB04E211AB3D3362FE61501C983B9217A08B434ACFF3C951C2
9DECFCB7918723A047CF3D5D2167EB65403EF41ADF0332BC16B8842580DCE11D
1F5D251784CDCBECDA247DEBAE7AEA7C5B6DF17547C4302865380B31750AE54B
1FA83A8AE371AEAF4FFAA8C60725EF826AE1EA5829C6F1EE79FB99B6AB40EA53
96DC668A0D5B56C1855D7EFC2F935CBE7CD83FD87415EBFD4E3CDBD4BB7BEFD5
7F9B94310A7A22A46895D14488C9CC6B0ED77BD1CF8123422B2DE259078236AF
64895A0B8245FA01CABF5C71CD1EC722ABE75B6EA02B8E6319F860CFFF1707D1
9C2F943CA473EBB2EB0E71D26E249F4ED438DFBBDEEB21D7C3F8A74AF4A738DB
FC6A4603FFD121D2445E0AE8EDE80F9F8BFEBC0E8A00B8923E7D7662F5F547F5
2BB678177DB5544C2598369FC23084B8BBA5E58E6767D61D7320EE565F3438AC
A253D3E74AB0225F4C5C1B9F1BB3CFE911F35A8FBCA52CE43DDEE1CCEE976F06
9D22F2C3EF347BDF911D83972DECD70AA839DAEC17CA07476AC0C27A98F753AF
73C3DB1622DBBA68D8B999797D3AF0FBDEAE34D86FCC7C1127F330CA9A484E0F
D7E3DDF4A937C0CCB55FA66975EB0B4BE36DD6044F279AF99A80A83786269D53
50A02E8ED9708C89D55653E630C0BB5DD9C7B8FEAE5C400664FC2A22313AE7A4
DD4BD5480C12B4EDD1E94DDA2BDF29717D793D2A2299848821D8BFBFA729A43C
74668E0E69CCF8F290AA878F8E64CE516A7451E3486CD38D6AE57B2717F5E9BD
2736AE9F5F5C6864FD616B30C37255FB2AD067490E9E249C46BA7C073189FAAF
F33FCD33565A81EC581463E221C105F8BDEC808B3EF2F0B2134EBA272018D2F3
F56F2ADD6D7B0912CC4D75285F7A35FD2AB8ADD31477FC5804A70EF2B38CD163
FCF10CDAD7AD64FE78B13B4C86C05CB84878D2D5CE5CADE9F21BB47ED0B9A740
B94FFD8E124B9D97DA53202A1429C5A64153E3F8C39839193B5D74232C151DA7
3F22E7C2DC2C037724A510AB01EB9CD9AC2DAA1F3B88974518C0F35F0F69195C
AD2391BBD3A852A42B489DDAEF147B6F0EDAFA73FC75C89AAF7FA58A4E1B8629
C02AA8EF1352AAC9472A89222A457B576D6E2C71F2C867D106678E3C1F54ABA7
0ABCFE0B3562DAA4575E90305D450ADC5BB75CF57163E55B29B1C7265FF370CC
BBFE2839F77BB6BBCB2F0C553A4052079620D1798790FF3847C6EA471255F63A
9A19250E4E7DD1884967092A65593EC32F0C344B0D30C1B3632E323597A48E56
CDC8E29DF2B936A41919F1FDA1EB930250D10BCCF6FFD69377B6603A72E0B7F0
DC7EB0C10306F496474C70D66D32D9E886E921BC40ED8749FCB70F99176A0F1F
D48A74FF8310C6582927168DBB1B957DAF0C3D934FABAC047BAE8830F42CE430
C7FC6870CE6CE0942380E048B0F983A21BA72C3FDC28A664AFFA114FBD64A569
A22D0B23C36DAE2DCD729CBE44C563989BB10AD9A7B337F96CA37C49EADF2F1E
5EB95ECC0C5188011515A6509655D774C1E341B25899479ADE72A4A78C806AD3
C5149D3E127EC8F07AFBD1D7BB5EFE7B39D90A7AB861A90ADD42D12D6FE5A6EF
CC641D522DF0D4183BE33174125ECE25C7F943D35374EC8B9D82AD8EBB8084C2
85889D4033E19B1D70C6ABA8C36F7E1FF938AC1A373389B35FF72C16CB0F4CDE
868AD486F4CBA81ABDFF1CECC1B14B3EC302CE30D0AAFFBADACA79E71D71FB61
B25A9B1565883F4429594AA6842D069FF0791915EE8C821E9C59778FB9F1AE51
48F2148BADD56BF5011FE09EFCEAF16124BD5B8FEA6BFFA539E37B011D75BAAF
D1C5BE3F52C7A49B00DA83E64CF512CB7E329BE390A2B33CDF974E55337CEBAD
505FA9BC16509E0F0BA59CCCFB9DCC72627E8D7F9CBD926651EE30E59D40F402
5F3522CEA09B6FC77848D6DDBF7399D053B20218C7A73EC15BB895E2B8718BC9
BDF2EF78BCD5F4BA7488585502A21BCF36C47FB98AD9BE1D7D53F2711903B323
5BEB9FC9EFEDF7FD1253B2CEBF0D04DC95F4AA288778D2B92052DF5A4A22E28E
B89E2D856FE07B7890719F71375D2D840C986782F5E188DB932D2ADF16AF076C
34F87925579AA2DD6F7CB522FBC32698AAD409261EACFA8BD148B753426958D9
01D67E5D7102BAC4DE550A7EE6CED287D254C83575D1D60412CD29D6E57FC502
03EE6EC6C441013D9C4146E734F482D34B1F9E56B1AB9761C08CF715402D866C
DB75B068AC236F3F6EA03D0E679511400C0DFC80ED8BCE60020C71DF1AEDD917
C502A005040BD6626956AF46135B0CF34398FD21D987D168C5EBB0AC89913BFC
F9740123ACF436417F6F9AB74FBFC5DCF9417315A6431F31DB320EAD82BAAF94
F9192EE1AFC0C9F73B45F637F2049E6CD3391B2F83E29DECABDA58224A28CAE7
8E3BBCACA0E8CAAD3ED468D680D151B46B5BFFAB5275D77CF3C9A70B373BEC8E
E16A997DFA077B734FD051E145290610B0EFCCA68C84201D9C3A3A8D49793EA4
A3DD9701BC6A48304A4B8CBCB56533EE8274B19EFE53EB6CF697D2F39885B60D
F6901F781D66376C1E937CE0899897FFB95B6BB2DDEA4AA58BF820572FEA3773
09F8221F818BFDFC8AF809262A5672B93B10F4A3EA4B57B892D3713A7F27D98A
3D09EDAE93E594CD2B03523368D35BC1C2F93CC2F2DCA6ED3606B104BA961729
B5AFD5977B6B4269276D5EAC96AD10F54994552F3D26C2E38BF657894388A394
533FBD1B52406286110327B6A8942411B16F7418A06FEB355265DC99A28E9CA8
DC773642471C3BC94A9B1DB9BBE40CE7DDED925E598F74DC6E57788224252575
3C37888C9E09B6DBADF5718A7ADCD2D1572A1DEF6A75FEFFEC94F25105617209
26689F58CBC4EEFCDA10685486EFA0A04C3946643AEE919B722A31F3357BCBB3
FF5A2045A6026BB9301336C7236D6F4A7351F3F8A199EB5FC6B29DB52FE2B4D4
DCC1B7874602F5F06F3C182797A62E2D6EA0E44671F371ADB8ED68D94BC788F1
04490DC1B310375C01B304328E4E069A73E7844FB78F8066613CDA48EA60FEB8
2F884867E9303328DEC8E2BFF6B7BDD7C60BC8E0FC1EB33D8B203FF29F6C79E6
05ECA4992A35DCB1E590A86D6F188CA107AB7F88E15ED81C21BABD31711DFCF6
F80A7AE07D8FB2F237EC1B5F19FADFF209D9E6D8ECB4C7D5F94E899E346B4446
E7EFA4EC8DD093A79E6138F201E3E1C68FF67379C6853C5E3B8937943407A383
37C9812303280289D54E5D4E06E6476CCCB72F3414BF93B9DCA771423131B47D
155ACAF1FCFEA2A9FFFC3C735C4ECBFAE9E6C3FE1F2CF7D694BE2E4E12F022DC
5CF5CDDDD54E3EE7AE5FE6596780FDF6EC081D05995BA5C16EA0540585400873
3EF7B9E4F67C88B447BD86C36172F8CA065C374F37FA9535BD42564DFFB41C3D
70DA2041F256EA4649ABEA1DF9315294772B521F02D4F4E3B6B6E7431B0223CD
6DC15F411E8129CAF976B744A21C3DA7172CD03BD25CA5C54313862E3DDE1FB3
726AFA9280DF87A6F447535F7BA356F3E3B1A159AB9887FC6AD3778F62B9A5E5
D4469C038FECFCF66285254949E592E09588E083121C320E488E9BB0B84A445F
E6F32FBB265C253F9F86D4E3C2C1F349B03EEA2FB6886FF35588B593DD199420
DB3E1E92FBCC5F3B39EE2EA17F8AEE8067BE8A195637E9857CBB9E53AD29DBD3
B36B146148D5249E26F31D2F5F594C8BF1A4DE2CB148928E78DE2507BF6B2766
F716C934A9BB403210CFF31AA4837757F27FEC840608C74D217D911B7B9E26A1
3BB961831DE27245D957FC096526440CEA2E93C1482C1C4CB67FBF9588D44E9F
25AF402414D7141B306D430539F44491D337F00926CBE30E22A921234C6556CB
B688B34F828CD6355CCBBF6A6CDB958BED5D140BA47162A0224B606D402A7238
60612E0C3F7FB0E3CDC5499E1B8EC7DDE4B398E636ECBA6A34DAEF72856553BB
7FD6E0204D84669D8A0FFFAAEAA7D3B27D9648554DF7F59D85E26E7F778565F3
A065E64708E632CE4D67F965B1129B3904D009CF6C17F054D229904C060736FF
6733E4558B7436C05494437C3A7B477AC2C39F99B6051EB08E9304A9E6A1BEC2
76946C11999A22CB4032A22268AA7C43C57E7AEF93FF4B9540935D6EDA8C1374
78FA3E1B11A5ECEB6FCF7D38D72CFE0DF5A2B9E022AD8BD3BCCAB85A25CEE97C
7EF826876D6AB2725CA8AA547E4A0D8559936D5F3C82542C5E34F164AFB9A0B1
69566C3194494BD1B428A71E09C8F8A9DEB4429B18EBB420BB786EF24371825C
81EB40A739ACF6537A72846466E1A302F7F992F7A4B84F165E8659896D79B354
D565AD1B64A81F28F18759784F6333E048E2CE8EA9260235336C09703C7A939F
77700FE370372153EB6B49D8F48B1EBC259314D2A53849C2499808B02A6C2CE6
F4C699C6F826565223F3EBA4441B4026C78F00AEEBDBCBC685A9EFE359B457FA
172967AF8375FC50F65DE09D8DF2CB818B5F5E700AB6CCD2C60A3D454A2B4850
245582375D858524CF4462A5DF7CD10B5F8B81D843FDA32503A69CF1449E1793
FF097C9F0F03E64655A083E5530D44F07B7D7091DA2410A8914F36C0A93C5531
1CA8F266233F7D32051E8828003FBCC532662182AF7ACB5EDB8516BA5C0B6768
D5104E423F67BD39810DE94F9D5B7414E18DAAC9AB404073F8A8FA44E88711F6
9F86C9E613067EA93B5D3373876A62211255A3F83BDAD40659862663FB0A1C47
C4C50E20627B48F64274AD38661629650BCC82F533561EDFE0036C3E4F36707F
2F65DF938DEF7F4077EDEE5F9337F7593A15EC7A60A597553F404FA04EA1E2A5
E9616099195334927C26B8A7DFD64AEAFF121DE92D64D9D0EB8D27D16C63D619
C3CCAA2E665772CD023D35FFE3C1498003943C204356D1C73DC64C377C2BBD0F
F958A346E385A9EE2CC2E09039203D69C8FD8B61E129B074395C30AB4609F77D
5AC7F763F317DECADCC2304A71929D3CA4B36E467CBA4764538AA21D4D65F90C
28F95A680ED89C33C15CA425BFDD6FEB7AB9A6077AEC66EA93C50603FC8802BB
86FD13E2E6B6045836EE942D85A620100CC4C8079BAD58342C53FAABEB2DC6DC
B734E14C96B7357A668A6AF043B20CC7157055AD21DA047AB02A9C104645A1F6
A10F71FAF78B4C3C5757366BE4FF17712B7888F6832447436D725F1B590A677B
6919F375CEE71F0D2ED5792376694B9152B5364DDC40DA7C473B3E974BD11B77
AFA466BB28277741433DD18E0866FCEEB7C7AC6F74540044208251949F38AFFE
394DE8D7EB0AFD937763996D5EA34E810404CA1BE5D6575EB00BEED18B09BE56
2063A45F21700DDFFA7EC0C05004CE0C3758DE7949E635BB6AA8C40827088234
3F581AD0110EC06606BDF45107EB29F81316F39E73BD6B274DEE567F28131322
21C65FA569603AD008E2EAC660CA45791F84D6FEFF473CD447CA549CCCB9AD71
2703E047FA764D1DEB8BA0578970933FC2DB66FD6661D4347C090B7FF862D8D6
22381F8DC436327B161B927F27C47EDBB2E192076ADEF5FC74B2621802B29C1B
1D1D73B5093A5D5E8157B9CC7EEA74EE0A6AEC0D2C0731FECF607FCBA9EFE442
31081B1925075E9898AC6B1E27FD484B102488F97F2972FAEF45F6E41ADC8FB1
28B59E31E82134AF9CCC25F928D86FA7F559AF7D8B95399452991BB67814ACE7
7A535F26F41D88EAF3A7D59E6E3176E577BF5B2DD1337D0D9F34245F99EE6466
56697101EE5A429B8F7399FE297173F791DE35A5FA35ED672FEDD739F3288F30
786DEB3474E9AE92BD1BD78162E9777815C774528B323F421927B01B39C3D7F3
78B62DB43CA4174BC18C85E8494F591CCFA8470B074BD825FA5333D26FCC53EC
347882F06872A12E838020D55F58D56B615D1603149E09ABF610C5C14737B5ED
E982E0E919E498299D600F63F3A89D54ED407BB17A47E4268A415B0A5A048479
31056844117D223CC2C40FED0762B201A71A50B9B222A7E1F556079F00D99F77
B803BC74C263F26AF6E7B9BE8F9873C263147E39D7C03F5496D8D06956904C7C
D1C65AEA1FEA4DCCA1F9C1042BC625C90931E1932B7D165E51FA8CFC15DE1CCD
B236E2E1F1D8EB91714F4D5197E71A03BABEE7CCC7F6D60934954D763A524411
5D832B30EBC829D825B49A9468BEEC10F431519AE4885C7A7A0EC9F4709ACC95
A589EDC07CD846764E0F01FFEA07F6E7F576786F3FD55C50BA2AD39295817C5D
4B5138DFDCE0498D5724B9C1B17613485DD9BA5DABCFCCB5697CF2A641C90A5F
CDCBCEF490A7F3A65B0A4AB5EF0CAD8F3EFE3ADC8D50E27FF896ED015C6CB73C
C15E53D23E9B57B1E4870CEF34946A79714D2323F60F0DA90ABA43BFB3060294
8AB434D2D63B1D6A665BCF0D177743AFF536C420DEDD52B53088315C0F08B59F
FF038C46AAE03EBA74250EBE288509FE58D16143B4089BCAE57052A8E8732337
7DFB508017374E379EE75C2E7C87708A33700CA93F669D4F7DBA1AB80B2CF66C
BC740469B9B616B199F1763F335244FBAE85025933F6CC0B0DC58468CEC2282E
766CF393A6187502C4D9AEE3FD235BEF008812106CDCA5037B200C22FE625408
3A17D3315B25CAEDAB90ABBCF3FFFEA0E8B369272F55A0CC63C77EFA545A9928
946D1AC5AE686BEAD3A6C785B499ACC619835AA7B126A299B6016176C2D264D4
E73B0A136325E8262EF9A86AB0B65BC180E431576953BBF9865A6BE6E72F04B7
F40DB27271E44622C2967871B507D78B066B811643F05787CF4875566333BEDD
FD20977CFEC446F457038FF95966426FCC64204E9096D3EEECD6BC5FA4CB0F6A
0C2381F8E1BCEF3EDEAD7FD465F14CF435BB110EF131DCD1CBA143B750F7B20D
D0A4F3C80D126CAA7E1D8DF86149B1312A3D67F546FB9F8B01D3261237D6072A
95481819FF7CF55157CB4C2BE9C89F909735BBB53C11022B73C0374EEC53A923
904E0DF7D900F96468774C77F2E5A8A6715C8CCD5B16
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941EC8B11F5E5D
7A41A3DDE0ADA6FDE48EBC453CC75C86FC16EE0A41ED12391FC20E09241E4A92
6CB9D1E9551D1254368CDDB5880CBB2304F858658779E1F56C5D8AE5D711FD3B
F6607AF979C9B58A3336273E70AA5CF8D6D4FAC2F904F1A17CB45016923F255A
23E86A87886B19AF5461C9E3A819ED1AA1BC2EDFDE89064B02E89E47DE705EFE
A9D95076FED1174757C91B9291F36984A5B15F749FC4B25FC5BFE1180C35ABB5
20A6F60B505174A28355B158D6E6F5099188C9603003E151EE0E5A16FCEAAACD
C4DA41C606B68BE3A639BF24981B13B21F1E27774CC20D0EC99C3E9A1991BB21
3AD96027F4205F34A6495732F828AFF2A611135A39E932D19CD85F3F83AB642C
03E16B204962BC68AB936A5EC2650922F21520BC93F65E111F62050253F75188
DD6E9B1ACDC20DEC20BD6E81309EBBDEC6FE4167AF519A67746A1BB33298840D
0D191AA423928805FBF2EE480314ACDD591413F1CF93A6A57BB3858F32669796
5E6FD1035E9898C63CAB854E80CE04C4078F2438F0187C391C1AADC366E09518
6F15B4CF07EB0C84FAFA0C67866F9E520A33ED035D6E315495C223A7EA3B5576
778B9C924BE50FCF243A72FEF8053865EF896E2B0FE4E7F1C9BFFA1D5D27B89F
AD2A00A0F84CA81171A90F19487E4C43AB356D2A4EBB607027FCB164F21405F9
8E32B16519AE3978F76AF912A7BAF735F76294E73209F533216176309AF3C5AE
88BB0C5CE966D64206E533DD1AF9F1C64AE9850B36FEC1452779C7A1E98BD381
81678BC802999E22CF2265E04E3C78DAB918F95325FC0EEDCCD0A65DBB370267
577B9F51BD7AE85CF09C890A9EDEC9CED1DB822D8364BA4A52A17EC97639C144
63CC5357F755C48E49F4F1034A8645A68D436C4015D51FD579661F3E2FAA54D8
11386573C91A06718130FDC8BC904083F4BF0F87C0A2DDB3E440B263D9A531D8
2EBEACACC718F5905E864DD54CA062EA1FF4034D04AFE4FBE09BCA323D5EB7F8
A15D60587FC7D23BABB8D23F7C9C77D990FECD8CFA96EB61F444122617479B23
14EA6C96CA2FE77B014916300BF46147E1DDCE173126E3FDCF7D711DAC380E4F
048050E3FB3B78213978467D18E18B8A33CCE59F410FBB89C699E9A2A898BBD1
611045BD9EBEC8F109050EB206E07C90006F1AD6EDB01A48733BCEBEF9452316
6208DE6B768A73EC1074D2DC17B8E3D6160A5A5E5239EFB92166773BC0C34057
41CAD56B1F6307D87655EFDC4FFFB8C684CC40B8F993B6FC8F85791417D259BA
7FBC2A368CA67F79A9DD91ED4F6FEFFA80817B67E939CF697F7DC35534C099B9
3CA5382DCBB7247F452AA4E056CEE265838696FCE8ECBB553C90B4F7FB949DD0
94EFC754BFFC1C0AB45D3B72048904BBD47D276D475E2FB51F74A8BE2E5D06A2
D13141E35806D8F53E8F34D70DF5C324DEB56545B753309D8BFF61DF17BFBDBE
2FB8BF4BA63A363CC8DE6C807FD8CC83AA4C7C9C1F9CCA2FD13450E7373E3688
A95BF0A56769149F2A1B8CA35F8695A9553FE14839A364894014897A2F2A0665
56C4BAAC7632F0307817C09D60F57092A13C21F308890D5342531102115C86F3
7C3BF3AA11F9C91D33E6F388E1C1C7839B309F0421354ED4AF849C0EC84D5F42
1F35EB45FBB2F6EF001AB5F5E3E1F6D78CACCB2DB0B8AA9C9EA9AC60E9D7F0A1
460235BF13206A3DA1E7D0A9485124BF40246A18A8D9AA572EB9BFDBF3ADF9B7
AA12CFA2E0211388135D30717D86CDE186AB9359A878A64E913A47BA5B592923
819F890D9B5F31F0068FFE0A2D7B5F8C29CFB51B8E41C9FFB7ED2910C66D6FB9
86F18A84073EF495AC07199FA852ECEF83B04C57E417691562239B72B6E031D1
AB727F6A3F7C7EBE4EFA3A670A080A221BEE8B2CD4552489B8E5A3BB3CF4DE9C
392BCC371945E81429AAD4E9720350560CAA654C5FF647911BB34107E71F93FD
549FFF0AA0FD18517367BE5BA43F3F16663DCFDAD036FA15EAEA65ACAB6966B6
CBDFE9D437F5D4B16A540DE0B7C0AF46DE7882A5840239BDD708BD684BFE08C9
D31F9C0ADD06776E2A65C4A068C33E1E8FB79F8D4069C25BE4D6C6799B09F491
EDC070289822BB030281E1C6A00A813CAC93DCFD9043FB4F1FE2A6E90B833CDA
88F7D05B46A75C1B65C4B4A56F1F9F5EC6635279B3810ABBEA04BBABAA8B6BCA
E4281D438A6EB07468524137D2041C176E0E87FD781289145C5EBABB1CD4721D
1A90B7633CB2E4A04C71FD07D08C7F64F5F8C951A97A3AB11DAD5040652CF1F3
5BE888245721D1A099334AF98B507ABE1BD6452AF615DE360AC0EF7813EB9CBF
516A656684697F987D5F7F6D4893D64E3AEC89CE84D35204D1520BCF31E3CBE9
2822A51855DBEB20A42BCA8FA7DA6343A462DD7913665633A36B46D8D5FC491A
D6C66659BAB7954A47BF9EA216FED73AD66F7AB5A2801670C3D6BAB0DA044DF9
5881AB1C44FF9287F2F416CB623FE8DF751ADFCB4C672E35E00F61478D077C27
D4E3D33A7E3016DD6362F7309DB08063EA72DB6C8E32FAC4504D15EC2DB70CAB
2A65C6DA321AB59BC6AC45B0464F433C877462BB852BDF4ECF3FD73A6DB7D18C
ECC4B9740B8ECECD16547D4EC400CD4D341AC39FBB4869162DE96A3A92644A9E
56DDF207E96FCA8530F45FC3E6C5CB49F2FAA0E25BEBCB02C1FB3BD4BD4174E8
93EC0D20D12694FEF28E49E7BBA32C7A61D7D1AA28974230AA7FEC8C599519DA
FC4259C849EF6672464FBC093FC96F298AD1B500BC6A8E55780B65950A9C5D04
C6AEF52AD7C5ED80B4481AA6DE0B0EBAAA7523628FE96F8FBCC0AD7C6A05D6A0
482BEE504D6FABE39CDB2EF8751BA554EF5D7882ADE4DC810796E92F1FFB7197
3274E9F910512B1C1863E7A7A632F6F5EDAA02513FC31FC8D802FDC5AA90DB7A
96133B2E41002B719EA4B9B6D3D6463A808C4280C15A37399682776C7AB2623C
5837489878E016100B556812C6BB0A1AE4A398C3E43616BD1ECCF400858A1BA8
7791EAFDDEACCA99724FCF6B4D07A2CFE4448F77D161F6A2423F03E8B5143700
E3564AC7F0D4D7E189206F65681732C4D0A46D395BEAFAF4002BAA49AC658485
21502BAD4D61ED623F5E7ABEB2FD88C69AC5E801DE2F3AD27409617359037A22
B2F0F46F680C911FE7145CFB7660227119F68C6EE144593F143E56DA4D95BF11
6C42EE5B6CACEB4FA676BEE1A94E71829C395F4B34FDA033E3DD4A10F14D25A0
F626822AA8AADC5BCE9E340006F0A7DD608AE8BC2B28C06087C730807473570A
15EAEBFB346A9DF4B7B0F08B52015BC43E38D784D8CCB00CC88AB47BBE9E5560
34AFB6C77347A049AF60C860AA9D845C3EE9692A939C59A5220D98E756A0158E
033735774A1B26A8A85461932295578E9B50AD236D3E2F50FA5DC64F7A84AA61
35892920579CE3704CE423A65EDD143AB5D892932821E726BD4CBA7AE8BF83E1
1DFBCBC20E23477EDB146F2ED2D201ABC2BC9C8829A54FCCA5EA54D5661DA997
4DFAC36A350AD7C2B85385557195822F6142AF467CC0F899E4C17F66539A5B12
BE1970B61D89EB544039EA4FBBFBA801B5A4EB6DF0AB462E77D830196CCC9F9A
3C1AA557285C84E133C52692EC4DD041943F3371D3D5F490FA8C3CC1A9A21DDC
A4324C085CA7072F3257C1254B2A0FB0AC782C2AECC3499A58E5C6F28CCC1D27
301CB13095D049EF51A69E36E55F44252B5C8279304F60092DC6D54944FAB3AE
6F055641C5D5055EF5ED9346C0D27D21F892B9AE31D2827D15B1A4E61131B20D
D96BA6CC7EFE4F0FC0732CA34EFF3A7D45FF7A902183036CEE800D650FE2CD2E
74C038665ECA6807DB9C68348CC174A091791FA74520C8614D4FB11256961E7C
F1B65135F07EAF54D944AAB77B61B0A7EB4D25F3608619F0A669DCAC8A04695C
7C992E8920BFEADEDDFDC091F417492DAA7D861EC78D970912F6E95AA79F67FA
FC8ACE92AB999E8192D039D2BA80D55CD186E623E1BDF00D7DA364AA77C27205
62561FF5E793358576B6AFCA40E2B3FD5D84CA2E8A1D786504653919C957F837
6C1434D0C315024D01517C979AD8A4A106E081B8C86109F0A6104E7F1DC50A49
F7E99DEEBAF70DDF9C5A9FA4E03E8199517A05C3D9DE61480BB0D0C3EBB435EF
B7C4552E5B6458369E0DEF48B0A8A2B7F3BB9162D6EB06C85B916800B7D447C5
52A88EA42ACF86BDA0A3A766955B7F8FE1AF0962EFCE45FBFE1C741686663FE2
0B921D8E557C63897ADFA66A317942C09E412E8A52D8BF996F019601D2A9F46E
9323A55AA18339E5391F22BC4E416E97E01741AE7AC7633FA18A661C1812F637
70248FD9E8CEE68A12EEE6178DBA41011D88A59054DF5F556C857188E6281035
024928A3B8EDB443D31F0A00AA235BEEE1526A17A993BC379F71ED9D17DC0931
197E7A9E40D8191901889F2ABD69C7435CD6362BCB6A091F84CF14B1D2A98010
7613E5718FCCD14AB63BE5261F8A758EF1403EED20BE128E28298145B68FDF44
5988BC66B3FA6EFFF40361EC21C7CE677FEBF99DB4532642FE26092F85487EA0
665B53D25C82DB0899C1D3901A183324139A81FDC1BCE61B7E1609593665F536
208D3223C015E0F219DCE3A449568515FF65F1C369EB82DB817F05E20E241E35
CF9DA0B1C4ED1822CBEA7FAAEDF877D01BE3D7692F07A7D4C70F6F5262D759ED
86962845384A2C0EF7347C378BDE596CA70AA171AFA2C7DF0C93DE8A4376723E
5ABCC77C7BFA85ED91FE6EFD2B5C654887A6853775C9BE7F0A1E8868B9981E3E
D5E89D64800FCFD06A8900CDE4DBC9CE45288EACF984675629DCF767F68E78FC
37E575413E0DAE9A8B08E4C8499C035D4744147FC75D2294CF5E6162DB816487
7D605A46610E9F323CD7F26E3FB7B672662EED5975E354B4A136B468B4DEEB37
9B9D9350EB3122F47A65C463F260AA6C5E25DADC5778CF6C7EA50402A092BB55
00F5A686ABB83FE32715F1A202D8D054C82D41DAA9164AABA8D7D8C453CD3C97
984F66B65AC6D2D8DD41C9BDE862C84896C18272A55D10896E3CDD80F835BBF6
09FCE119E549FB18E9A03370A9D68AD6804E85055AA11026F9842CB533538AAF
2A729CCFB5F964DF400E8969C0F0A4BF1784CE46DD8BAF4E52783857077CCD79
A9161EA288691642EBD199D65932B2601D4DD43F45C974D0294CF3C9FA106BA4
B91D0B6F58BE6407192305840219ACF2CBB3CFB8F6DF86922ABC016438201492
B3DCCC2E99A1794CA42937DB268AF71038E1F8BF24D09539CDDAD0CBB221465F
C9629B7CA1554CA4065043D5B3E182893D3CFCEBA9899E4D364298B5A2B56150
8D796D11A951D623D02C4198FE4FA032B356805C14ADF2BD452FE1E1007BEDE2
8152CABB4BAB051D30FCB0AD0B565940951DC44491561919632F1E1DE3EB0B52
5A10C58FE79946CB98B866CDDD562AC07DF2E8403E8604F7E832812A09DD6833
0FCCA98576F55DF6BA2B3C2AB64951EF16B2A824980B796335E9FD19F3FB826D
960F9C7FE27AC2979D30ED729EDE8A175F84E9B6059C24912987A795FC1673B2
15C9219E68AE9F2262B6E0B7605E49E41D222100F2110AA7043596A0E6192D3E
B498E0B20D2713DECC7777CE71FD6D98B980FE4AD0A5C2D866572D0A56A6FD04
292E0097E96C85011603F9ABEA5E13489EC5C49C2C7868C8100ABBD746059E4D
CDEEA5EE8EB272F7965BC832A88431440083065DA3385B3DECE2CFEFEA904B7B
6063F6D01625696BFA2D1CA457B87EEA4A33D1F7FF1A486A5F55EC37E0CB4304
18ACC7EB02B6DB2DE64D5002063CB8D9DB669C1316DBD0E20B0E1AB724416896
C6C55DF80899CEF7B91BB801D24ADD4F287FA0E8786863FC40C1E486E75FB583
7D9F77DCC1F467FC7D13AE5C875704DB3EE8B86A92B6ED342FBA3CDFFD3304CD
AB5FAB5253B7AECC55CA058B32476304FD00B384939565F276A463F2BF471DA6
814A55551C9DA689535EA43E107D953F433E9DCBAB258F1C5B386D1CD7CD3F62
68C007D653DC51C17C024518AD9A4685B2AEC73681EDA59085BEFEFF27559F2D
539901ECC9B05747D6775ECFC151367C94997302A354247A757DADBB5CFE83F7
146FA999161A0D8C7823AAC0CDDE28EEDCE3AC9A7E93D3A5664F2EE99AF123DE
CB170D2E461F5CA453B3B5485041056C2C70857879C6AE952B2B6EB3B9CE6A69
ABC6D95E35FAF39CFB2D0E9CFDF574F64E7BA34FEFAB65FEA04E03C9AB6DDBB5
A1F0434A21804DDB5AE69F1A46782C0965DCCE8DD0DA71E8389E3B2B9587627E
0FAAAC11CB364E71A1AD749755176EC5E348B739FCE34E398C4D3E275BB0C44A
12E8967BB3ACFA385D9CAC5756CD88161E498032156EBEA8C64FDD49DF99461B
FDE59A43C467308DC8D263FC7BA8F935238E82956C01F49BA754960A53DC3441
ADA5828F3F7929A8B84F63EF8485EB0BC72870DC36C4B3BAB973BAC932F6D441
794B3C9EA817666CD6E75CCD3346C9759ED9FEC02630B5C767F96ACAB28DCDD9
BA46ADE90A4CB6D5D1A8C517450A96165DD3F4EA6905E5767DD2E82DA2EDA695
DF6289C9A8490D428290C13DE347A384967BB15F578EF2117EB0EFBA0D8E291D
E9637ED2343D00DFC53165B135DBE92E923B494A5C35D269C63E0429FFB67F30
BFFA6D8D46958E941B594A1E2F51B0AA29C827945FD0FAF6AD4436D3FDD1CAFD
5CC18214837EFF3B93B969C3721BD0CF5C6195C160F8F0AE8AA9D8F162B1E532
2C046CCB9D9183F1D7EFB6A880B060BF0E55A44CF0995EDB7C87B5F538B00FB1
2366AE86C4144308D9D2D627DC63776BEA4F1EB3A31D10541A384F67EEEB2FDD
1E586415B22C6B9AAAAC1804C8AB203A18D860AB196373B9833FAD6217BC2961
B537184DA8930E369DA745B84EE2D50B1CD2B12EBB6E61A2E8ED6581D0DA44B3
5800396CEEA9FE52ED7AEF0FA015284018C09D144F25B5733057FAD28964B5F6
D3F12F7C63703A04C84F8679C6A2B34572C87C1D55BF0953C55279A8A5B1B308
5FCADEA65B7A42D2167040F142FB5FDF70E9A8460AB6204E3045AA6F78734042
49F8DDCB63C74D71497B7A1456780ED76337619F86AFD72D9B7C6EEAAB60CA21
936CCE3E8E8E7D0BC5FA38326DB274D617D3F5634E6D10D3EF5A4E4AC2ED8491
3ABF214F5A66818C8992202C951821B805D0578CDDC0363F5623ECEEB6E2A2A6
B0FF59CF6A9F81DEEEC02F059EDB7E2AACF92B1EC973C86CB6F1522875BF6F0B
2A1ADA451EEA85CE4CD01F170E25F96CD7F669B149014BB6E8E6BBF82C1F6DD3
56E5D05DBC810172D6610A76C6D4C863F8286F95C40D84F887A21F1A893E7864
D2704644F0B6AC31C348AB8EA0CC6B7800DF5A3DC0DDF4122DAE3DB5EE2D54E4
93E8DB07CFCAFADE77AA66F6DDB9DE27F5D223451D7CE3787A2A8A1073939E4C
6EAE120FFD8C2F6FA32820A9A01E3C5D44B0D7312423888386737337C389891C
70D9521C17BD32E8D7007D5112AD257C4283F6DC0B975063CBC211927C1A629D
BFE2B1D9979227A083C16DF4C55EC45F65885B73924C8CC163673F1801C2EE43
8897A9887BA5FC1B222BC473CF7200BFC0E5DE15DA9CC45DBC190753C65EC7AF
49E4CF4485A36248EF43EE776B895A1A86A9A28C71BC62ED477C48E403283CE0
3AC2CA8BDA73C8668E84FE6EDB3F64060E2D4FF1252FA40918F80C64560055C5
948DA72F87DD0FB7EE1D71A32BC9625E6DAA6758AEBCDB7019A52FBBB11B3466
F954230978BD23BD12072803D9D7B17500A9C571C15047C13E34C23E30BB24B5
05A671522C05A84087E2FD61FD9FDBCD1E602793B95025A7F5F5A8924F24643F
D2F172EC7E3360B0AFB4F6D39A007E16F6A1B7A5B1DDFC194F4B4E3869577255
8E1AD53DC57DC379BFE612ED89BC1FE86D70B9C0C1C50947A342F469FC5668DC
C96D1CD54FCA81575983FC6EB264BA3599E962F0BFED9C5BF69C196EA8CAA09F
A0138D667CA9A3CDAEC9C46F06E2A9A1172A13400F47361D3E4EE253A981B3C9
2809F1B9DDA3E0E5B606F6D9D41A355DFB65010ADCAF74778679BED2A496406C
DDBFF5EB88202DFE4E35E2E30EF2EF0B6ECF1B5031D294815D9D9AC7D321FAF3
2A00F1FEEB9A76E30F9E946AE2257FFCBDAD94668A27E9830399D1BC91F42618
1BC479602B12C8985EFF414683CD54FC2830ABBBCA28DBB1FEA484EE37ED2A01
61CD5E3260E5DB274F39702B705F98B6B7A1EB285BC7B331EB07DF785DCA8DC5
112FE02DDF8AEE3ED63C4E62CA773413019868117F67B1C9A26E3BC4A1F53D78
134B5E24438BD9811A8868EF46E95E50104F28B48B7545634430558DC32AB05C
97512FB08C5907612E132A3D80899973399A6A4F0F342CCF38EC3937021C565E
18525832016368FEB208FDFDBF5E0208850041351C9AE8C30B7289FCC08F0257
EEEDB659FE1F5709B6FFA9A0584EB94C44F7B72D7CE627F71C89EB7E866DF899
59D51CC312D4629717F303B1D608C532BF1A0C6DADC8858E831A71509537E28F
EEFD9C36F0D29A0678C92B2744D5A4A4954F1B6EADE5DDB7C5CAEF6905216877
26A14E50F09672B18F1A367B252B5A5A2BC8166AC7459D1224A425A9F35A44EE
572197E4EABD68AC36EA37DDF2E1E372F833A36DF1BF4F3282EFB8773409AC06
AF92A7595C666B0B01210134C6B745DE57E5E5FDBFBB4F19F8CD4B8240F81C17
CAD49E1F7677C7FB0388948E634E6ADAB0CFC69AB5189503CA879BD7A707B87C
B2C1888D651DD2217B3C38E50B07BDF791B114D5A684E3C8E79B2E3C3FFB9B5C
5A0BAED8DFCE16307B23BE6967501C1B198C8A11C5DCFBCCED29ADB5A478EE99
92ADA9885BE1B36BA27A1BFD7B7ADA020B3809912386327BC1B31D57CAD740C0
27FF2EDDE027802F84B6E620D5C79769F37BE159788D7EB9B772EFAEDD69C623
2FB0175ABBA51B753A1184A0F90D3AC07E6E2777038B09BF49F342901F6EF88E
BC67BFD892E35EC55189027CFB794CFF2A209D8BAC9E84184DD6C0CC21603E89
C6A52DDDD15A9C3933403EC980B08F4C0180FF6F8143814AEC4AAEAF6D673099
16DDBFC3A619B3B0894808ECF27F31CCC3F1E4360CF9897CB34C9DBFAC3B0209
E169A7FC0DBDAB3C3B8C2123AFD339399BA36BC81611E20FF6817926A4B132F2
602543ACF512F23D5BF93E8A9D55C608C36B5E243203A119440D3D8C58C6A324
100DC46CD6AE7C89DCEE471A182A2095141C6E222CC57C8C16DF89753EB5EF06
1E8BF952D2213CC9E15C213A17B6884198C483D905B5CE6951BA7AE0FB383C8B
E807216A1C3B3224925827EA3B70012543C4FB5EB4FBCDEEE2DD064CE3E1EEF9
C0EB97CB2325B5E6172853148298ADAF8B467A2097E149A86AF68EB12C56B87C
FEB9E864D6AC9644F681C722C5113F51AF2FE923DE4AA50B624AA70494321756
F378AFD658CFB46CEC3A2C9766516623ED3FFDDB38D87EC19ADAD0F443E94FCE
0D6069B323FDDA1C62A2CFCE6B6EF6700FEADFCC67E522E4FEA360683DBEA542
AE47FCABC7F077C68BCEB5713320AE48F76F0846AED2F7AF1E453A58E18CBB6F
049C331EA174B05BEB2C1F8160F94BD1830D76F68A3B7DA598556738C7EB5A73
16880AAAF372025BD2E28C038193F6D18A79678282A7E33D1B38B2E3A1786462
D815BA61D017E83103FE65F3E05658A330C53749CE51BD17F9B7E2299BE8520D
C75435CDB534A6DD20FD874D3304E271902F873A5205A55C591F1EEF6543E13B
31371BCE4D1C95C37D9DDEE36F12C7280D31232345649DD680FE3C6F90A1B73C
FB7FD5FAACCB9080F45045C841ED89D74E4BA80B3BE227E220BE222C1FD0B19C
2F86B2DC33363EA202E59BB5905C46B7EBAF4D51258A74552585DE661E859B57
E28DE17879C632CFBB5ED649D8EC1963BA31A3D5745C0FB668D87B7115915CD5
B39E53D443D59FCDEFC05495E10D569D15DE5620FFD384FE3B8BAC05FECE6E3A
4E2A2635D21FA9EB3FBAA18E199B3E550C4555F630AC41249779C3553E2DF505
810FB9AC1C315239D912010E7A1DCB3DBC9277754A18FC54B2FE59797FD0CC7A
C146745E57144216DE51A2336317955DC341EE4CB86F45ED9B8EEA39149D06D1
FF3412D5049495EB708DAB64885595D5A3EB2BBD493BFD6FBB77F241415F1ACF
BED0D2E2DC3D800263094F1B3E3E06DCBB34FAD0130C70E46C2D3B414FB9D0B8
AB8AC4D48F0CCCBFE55D8F4BC13386F18FD0B56D2DEF3A2552FC481A42CFD01B
B0C975B4F27CAE44FAB34FF13BFC2ED2549B8B557499B2E21648727E5A015AFF
C98A10414629F77892E5905B9FB5C913800FFBE8AFC35141F4A38BAE475F9D84
E6D2F2C441701AF36B879D07E1226EB8902006A209B443F389EBD2BDA96CB697
9879558098D3EDFE1E72DB6EB30571334C9F7F7D24D1208F5CEE427AAAC6EEF4
A04949A4E82FE733875BCC65D4EBED33E6779AC2948B1535CE6248C2CD797384
E6EBA5EDFE5DC47403BA7E65350DCA4E89700C888BB0003E7EF33EBC2A243B03
D9F4D65952410DB6B35747C4BE41944E7B354B3812E8F9749E491AFB17C612DC
6CF60DC7E4332FAD4F20DFC0F5376884D8F3C0D08303283E87C2E9393194E0A0
1A4C8576E3EDCE0D55D749B53A2051FE46F6F160AAC5CD1F97C3F79627C988AA
D4232F170575B480C1A51E39FB9690566AE373E89CEF22EC5E44EA42DBEED86C
BC9A06F2E3D0E18B24CAFE5C22944D0B6EF144B3C592583DB4488DF35191BDD1
C6DDD641E3045B9EA26759C3076922B3499BB1719411814AEEB4E567578B5C42
E8229A337356AC62CBE1942E714634E4B822117FF931CC8EF7AE709DA9BE0D8F
2FE4D6DE0797DB4104BCD93691942E93E29790D7C97A3DF4F4C72D2DD9ADF47F
D1E94F62A63E18AF7A9F057215035433554AE4CCB9C0E25E2E997EB1B129C645
69ED99211F98B0C242E4503AB1EC0AE4679AD98D534C13157301B5721B4047E8
5297F010C7E3421262A230FCBB348978B523A9764D855BABDA34EAC7103F0016
B53C205B76C84E4052E3110A43E21BF7450E1B904213521B4E607D8CF04AD92D
268689CF99D9E53E87166DC3A7AD01250224DC5A11D6953BF8A2C62371D8F1E3
249BFD79B92FE3B2F19A04C33E423CFB50382A828AFA5B5F96835FE567ECD73D
B6A4BA29A7755A9FA3C314ACA74ED3B5FAA8BFDF938661A4E39365E2BF4397C3
6F4D2F1445B02A538B765A5A1BC8FD63C1C9023C113658A559BF952F5DDB160F
AF3F70894C7E77227584EAE3290E2194B696C1DBE0C6F4F5282B99E51980FD62
85210FA10D0BC1200E70DD82F211502AF427398B9EC2FCA764D9DDAF65B0B6AA
AD7DC596658DFDCF88E9C81AD35169A56509FAE0FA3049E4C4FABDDFFC086FBD
5F6C38328463C4A6A5A6F0EE83753CD1AC7D92C64E5AA7E4B818D6C64F929450
0CB399D09FB6C9FFA25A9E1E06723E29397D255D5D6D50C1F2B8D0DEB85BE3A1
2035064F6191E9765C4CB186D78E6527C30F987742440C084E9CD8E469F152FD
612AA277E6C2C5A53C0CF3314927753E36B16E25D630BB56FF167DFA469F83A8
16EFF889CB4E90EE89125AB5169E0CEE4A6D534A4BFE174F55C205D89C0293FC
8EF65CA11712BBA56E8138EF358D483019BC48A797F17A85E764337C8BB8BBF2
DEFA712AD6FC2F8C37919E4ED5ABF704CF073938246BFF9BE46A06E16CDCA7A3
03E826ACFEF57ACC243E6BECF8ABE7FD9CAE16F7BA670F7935C357BAEA447492
6C3D119AC3D14837F7FF89952C8CB48EC80AA634EAD45AFB4690FDA1109DD5D8
16E6E4FA42E7B39175F0D2F4F09EC6E4B588DDE62CEDA584EA8914F36D744BC6
29A6C3689462C2FBC618F6A5FC38185A6A9C475F256118034EAF01520A2474ED
539408C8AD187EE8D0D5DDFE31F5896C767CCE89330301F05C43FDD66DE3A864
D3C2989A09B1B976C217699440A0DC1AF2DE6E1288948ACC84E414D97476EA7C
1D8E825C8AB276E50172499FEF0B38026501DF01A57877B8F21E855950DB1279
45DB98F1166D344C911DB3BDB53E28E3EC069F503D00F10A66ED1C105DE6391C
0862CDA2A679CD55DE43EB41E951F38CE5781799D9B95B33A6260DF72BBDA4E6
EAB2F263C2054CD82E7209B2CCDFC5C7BDE55A8CDCFAD92693464CD109A91C3D
0A9EF3A5333ACD18FC75F89E596BC4EC6C6CF010B328187518A9A932A1DE9F4F
B337FAE975FD2C45A7D9A84C5A2282867FCC227361000BA52A9030A42539D716
AD9BB5DB27D55717B4B3FF19BEC997643990B91C0786EC0F5BD8DD3D7028AD9D
4F7D754F7ED9A3710ACEDAFBE81CEBE822AFEF76EC73957B7B3025D75473423E
BAD0A33A6B5C7278B3C437915A79E57C39E4161A88899D8021EE27EFF7711A74
31E1D7941E74E01FACD2A605CF5B7A3BD92BE7137F3D1AEF10DD9A82DD8DBC4B
96AFBD3F4414EF92D2B3AD8BE0203670179A5174EDFE040129B0B42A07D03D3E
86B91F07CF10E64BAF6B8B7303BF3EBF6608D95B081E35228F2785390B71278E
2B9BBD6E4463DF36CC3C7DB4E73A86469956BC635A19C3A18F6C9D9A4A7F3381
F2EFC6603EC53608447F66847E8C736B060AA1CB370450E0D105FC2FC3C4F91E
EF271213628C9C3A005B1D6A7113B6A8A10CDC74AD55000AD5E7D6ABB205860B
F0493A95FDD1EA4111505964816FB96FAB4F26B596CA26CA7DBE24826168CB97
DD03A74A9BB2A4D57424B6726425EA65137379004B05AD73A02DE4A48FE84CC3
9EA0AD1048367F4ABBDCBA8885F71AA61F868773058948361021BE5BB64B7262
59ED8FE6D2DC18EB4C0261B3F3A0B45FCC7ACAB24A096FE7C7671BBE98B5194D
FF05748B9742199EF52B1CF1539E9C8CCA6176942091C08051B3CFD6430E05C8
A82F2CA3502F036441CFC0589A9192FDEC9DBD70D43EB2F69322ABDEE4DA6D64
51EE7320F83030F96DBD7DAFDE8ACA28EF51D458E3FE509D3A2AD110956C1FC4
C396E65B01E9254382EC32FD48C203B38AB54759491D68F4D1824ECDF386B6ED
CB1560140F1C0268EB0C8D809EB38D62A187463BBF216334653B564C17C52C86
B5CFB787C93BBD6EE5471BE851BA230CB6A1B1870542B55EF5777F6BC9F6DFE8
DBE5D5EA88FB27330401DADD44C90D4DFBB80B478F3C0D2CA518C8E506431293
24AB4551B383940283A79B6153E6B6E55521A0589ACE7BFEC0AFE935236AE828
350A14BED8EF0111C173F1BB477022E4D43F5E59ECD84740F079050DC0432C0D
82344E9642693BC277B4864D52110967D6CA2970F372DE6593C890F892983301
BC500A92CDA63B82941B131AB07D9D6A068B041A6B9CA0B450876630F00F18F5
E9B669AD607DAC50C1B63CCE8CF318B28BE8555541484321F1063C6E4D50C707
BB55D33683172917486360DE6167B7A89E8D2904C797B2D8B69AE47D709E8D99
61EF168E41ADC6D008E4348DE0F2082E7E730C459412D45B298DE80B6EEDDF96
A75907AC0AD47A369F46B2F99438A2EF8990A5B960134EF18E245C5F934E00C3
6E1570360C4DB643ECAA35D299F9BD4D65BDE111B310364A1B05B4732BD35E58
44A7DF254034B7F6E0E112C08691EF50113E6551C38AC580CE5D8845A40E3E3F
0500B4A2B7A94C1178556EF8C2A44D1CADF324E090B40D61109DABDF038CAC09
F94C51B7B6677FA40DEF13360DBDD2B42DA32A071DD6F16F7BA809CE5876B8A7
AA3EB865B94A9CAB7A064659932DA26672BD79D66A9DAFADFDC94F0918237C28
47BE8CAAAA6F65AB228587B4BF5F21420466D4F1689273101C0E44376EDB30BF
660BA23DC2B7E4959726732D60776563A77378620F494144696FFAE4A78A9A16
40E7D365E345BE275C2F2A33569A350A1F7302547CEADC4CFFE05D0EAC824A51
F564679094720EDB5F0A25DB584212C1CE4093E2F1A817C598A84D53DEA143D8
0788EDAA4AC5136FC8B63D7CB7F78D44B40B3BFB831F805FEB79B4FF093884D7
8C1F09B9BDA40FE89AA9FDB2FD8E55D8F3DA0C6EDC31A1671F86A56E556FD84F
0BD8C22D2CE77577B59E085356738CA79A9E3896E1E35708C110DB26E07610D5
449D621E06A6F784C6E4E5FBDDC0D10BC2214575D969F5E7141F637913BF634E
038EF0F3DDD5F122A5F969CE03AE31BE406F0A0F23C04A3ECC96435F2C104EB2
880AB38E3BF78DFA5DE423770A293406C936EF785AC1680C681B5A20B0B2CC31
E2AF3E4868520390680FD724E713F32094A89FCD920D9088FBE6C9308AB9B1D5
C8A2E310AA7131747AF2ACCB7EAC14E1F3E99A7CA13FF435E584F682D5D7909E
8046ACBA01287A8156FC7ED53EE8AE4465A153E2C23095910C8C5ECECA120B7E
BE3AE8DB7AC1FD77BECCD726480DAC1682115DDEBF769A6DC8BA1BAEB17994DA
2DEB92044B80E0D7A13581C8BC1DE53835A728A0AB4CB63B7D7E5D60DF51F0CA
DAB3D49180BD40464DC0B1A55FC4940430DFA3FB5F4B57DA78C687FDE409A222
C830C21412568FCDA9536EDA91DC50E7B66EC0A7B70D587DF14253ABD0E1E13B
740A24AE42D4BEF09A6AF3C7640FA23517ECBE4BBF22729C324741E7CEF80164
25524DB54DD49549CE916FEADB764A6E5258E00A9D53E6258D88393E48F0346A
A691C4B70CB0645E8360E572EA42AC415BF8F6B5E84E5AEF9C41058EC916B87F
75A33EFEF49447C61C9D8E6D03725F8D9B7E9B405B71E2C0A5843F2D38CC3A4D
2AC4E4CE960EBBFC7B42EBB885CB5B899B8853219B6E5D196B96642833CEEC58
911F9C5C5C319EA9559E7DA63B802BA54EB1A6E4CA195672FA26941DE909F0E0
36529E673BE295475A9BE167F96029D82C2EA5F3D41A27A8368901CF0361EEED
45E14E7AA7FA16533F3F0C333E80B0C61FA7BC68B853211057CEB15EB8098100
D0DC85DE3FA6F546DD3EB1A2FECFD8B025C2CD8EA659DB9E05F4A46B99ABE6DD
5956871A077A7F7AD8143762ADF86C39331C642A95AC2159ED72E255A9F127E2
D4AB17B774A0E67B4462D635EF80CDCF8D4831AE6CEB3094016AB3F70C93B409
27ACEB291E1A0D873D835CE807AF0AE879128FC1829A7C2B4F9AA65B66C1F3BD
4CCD49F636F8A58FB546A45BC9542FCF8D601008C5B3F8ECD84D52149EAC4DAD
B1D18E60FF9735FE8EC567B05AD7A7A7BE358BE4BE5C0AF92E15B8A5C2C9F1D9
B63462359B7FF01F2431E33B5B7AEF80230425058365AB5F5345EBE86A69B8D8
4A7924B6FBD1E2E63E4DE3E4BACC957F1691933CDB77BE08B9D4C3A0F27327D3
D4F68E19A030C6B6CD38A30F8F2EA80D62F8402DEEF2FEE74537B5A7376847E9
4090C097AD972620A561081CAD8C32F9B50A1F55FBF2BD7B93743FECDDB33BBA
BD52BA5062A0901F35BE11ED2EC4A13601E6AD935A146173FF338674B99B380D
3376D352F34E3B2F554838314F5B6087E546C6E433A5C52C65F8AB1816B04E6E
739C0EA2BFC2CA516D66DDA9539F5422A600F757E358290C5614E4455B69B658
3E1B17A319628F64D32B4575FF0BEAB663E917C282AA40EB6496163EDCEEC9A6
71E294068ED56D2925C6A8CFDB4DC0ADA5D818C81DEE046C7165561ABC5CFAC5
1D6F4C193923AEA28465EBCE969A82AABF22CE2F7E581D945ACE5B780C80120C
2DE2579DA67F39A9D9AD5755E507D614A1F09C1B948C426AC40DE3F278BCE970
E91BCDC6A99CE92983AEBD18F6746BB7C0E8DAF3B70209B4E974630A463B6B20
16BA66A4EAEEA0E6B037DCAAE9558E671D266B2A0A67CC73BD6CF1CCC36F67DD
6773987C07FD61E6E947612EFB82FE80795BF437B0A9A79D085B4ED23335EB85
7D731D61B663F8256536D9E68DECF407C66D68F1685DA8520D0471F4F41B8275
D787879DE4C7A4056098DD020A4EA3AB959FD085450EED8460FC1B8AE6534AA9
D4A6BB67D2F3E67DB054442A250E78E74BA87F9FF96373E3CE4A509BA00F51F5
3EBF418AC7DA437B34F0C3BA888A646EF326B8796FD0DB033D940B028B8F799F
992618EB3349A532723970DAFC541F183EB59FD003AEC87D075869C3B1873A84
3AB43FFCA4B2A56527320C6FA0C28D25FA76AF0A909C43045D8422E5FF9C1B14
7FC181665B16B34FFE79596FD8C98CFDAF940A6FEDD7C6F319F6503610E48D3E
4C8A4262B3AA1F53CC7E16BB5822CEFA9A9E92D16725221474C9F11F981B6888
EA338F2BE6465A4B1F77315685D8D842586185AFC7E149BEC2672C51EA8671F5
C0672E269F81E76615E5FE1E8C0995FDFB929C047E7D55EC9B55577A0D147173
A9F419B7A5C0988D19D38C144B1FCACE86728A7C57D268952288B2AD21EC4B67
0A0DA00B906106CDD5A089FB1EAD7A1831F25D897A0E71669EFB4A441F35FB51
0E9EF1EC86EDA2F019EB1A137F9A8F04197B862BBFADC87BA1CBB3AF086257E5
8809B17CB5E394572BB38AD4DCD48AE80EFEB64E70E805E0F0DB317740F4195B
D9A1335995707E49C9933449E300E7C7AF391A958BBB95096277CEA885F7377E
9FC81B7FD875782071518626159CFE9BF8A6FF46BEE00CFAF7C0D408B8A77921
612066A786EC155E6C1BD074FEF17332B11E31BBC29E380306AF4EF4C9B6D70B
50AD94C0A863C6268ACDE0CC386C9CFA82A04DD4C5EF0767D0FCD3C2BF10937E
3835DFD3F0E1BD94A9561B84B7BC02964460265A71092CBBE27A6019530ED4DB
465D9A3427493FF6205B31482F7EF068C89EB5830CC45DA286893D5FB8B3916F
8BE846886BBE513B1F0B0C387ED2ADFABC2D179EBF5368CF7BF87951AB3D3331
DB772D08E2F5D6355DE02A4C0A2A43938D8A136D0B66B477E4D5C56BD537B88C
248C245869AA6FAB65460AC3FE12005EBF482DF573745A9C8377B8D19DCB34FF
540E93F15965949D9EF0D531DD3BCA54668C8B81704736F0B7CFCBBF0017ED25
A1BF0984EF3387B881237BB1972AAE959533A67B7FEF50B56093A07883A2E88A
55D27441795455A1F6C941EE8B1A9F61640AB69E2D86AA8AAF68AA68336EE2F2
59FCC5CA4DF27D37F1783344D358C58FF871E2332E9AF71BC299EF6E9DE0B666
8CA9F9FC525015992FA29E48DA57B883AA2CAFCA9FCE3DD3157207916239E645
A26369C9B851BECA6433A96482411440418C0685CDEB64C0CE4CDA8469F754D5
62CD5D5A28BC736A6EBD8D2BC9381249AB0E1BB9F3C74E1BFE089902A176F88F
46FCA1A8D0C5464FF0C281FEBD01932ED795F64276262B8C8F2F411328BB7E40
45DA5DB319120699D078E3DB3826F4B1A3D165C7B3BC18532AEA241D1B0615E2
6AD2BAC658181DBE0C3F9CF0F3B9E5F5CCBF0635D41B8817AE18C4C62A69F11A
2D2890F9BA53B7EDA5F031A2F0D180E3CD3D9914AA0C6FE1673C4D449400217B
8E03CC72DACBA5BF998253149F9D716BD29DE681C78E21261E37614F11FE693F
FA11756C3428AEE17EDE1DF3117EE1EDB628E6C3214CA711239B7553A5D83450
4E4702D92B519F7DB6B5FB19442793AC0C0F2ABEF3BEA0C0222FC1CE3102F053
37AD2D6195FDEB0DAEB9EA2F55D68993A3BFFBF0BA7FBF676AE620F885410011
B850C920AFF6E62B58C777
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (hw2.dvi)
@start /Fa 252[42 3[{}1 83.022 /CMSY10 rf /Fb 201[33
33 33 33 33 33 33 48[{}7 58.1154 /CMR7 rf /Fc 206[28
28 48[{}2 41.511 /CMR5 rf /Fd 135[38 49[42 11[20 58[{}3
58.1154 /CMMI7 rf /Fe 135[47 7[42 40 50 73 25 4[40 1[39
17[51 3[63 11[59 7[23 23 58[{}13 83.022 /CMMI10 rf /Ff
133[44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 1[44
44 44 44 44 44 44 44 44 1[44 1[44 1[44 44 6[44 4[44 1[44
2[44 44 44 44 2[44 44 44 3[44 44 1[44 44 44 44 44 44
44 44 44 44 44 44 44 44 44 44 1[44 44 44 39[{}60 83.022
/CMTT10 rf /Fg 139[37 1[39 2[48 1[80 27 2[27 53 48 37[72
10[48 48 48 48 48 48 48 1[27 46[{}17 83.022 /CMBX10 rf
/Fh 134[59 59 2[62 44 44 46 1[62 56 62 93 31 2[31 62
56 1[51 62 50 1[54 16[77 10[74 3[85 1[53 10[56 56 56
56 2[31 37 31 44[{}29 99.6264 /CMBX12 rf /Fi 134[71 71
2[75 52 53 55 1[75 67 75 112 37 2[37 2[41 61 75 60 1[65
14[100 1[92 10[88 1[97 1[102 12[67 67 67 67 3[45 45[{}27
119.552 /CMBX12 rf /Fj 133[37 44 44 60 44 46 32 33 33
44 46 42 46 69 23 44 25 23 46 42 25 37 46 37 46 42 9[85
1[62 60 46 2[57 65 5[30 1[65 1[57 1[60 1[62 3[65 2[23
42 42 42 42 42 42 42 42 42 42 1[23 1[23 65 42 32 32 28[48
11[{}56 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 325: Project 2)/Subject
(CS 325: Project 2)/Creator (LaTeX with hyperref package)/Author (Eric Timmerman, Stephanie Ison, Geoffrey Corey)/Keywords
(cs325 ``algorithmic analysis'') /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-8 -436 a
SDict begin H.S end
 -8 -436 a -8 -436 a
SDict begin H.R end
 -8 -436 a -8 -436 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -8
-436 a Black 0 TeXcolorgray Black 0 -120 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 -120 a 0
-120 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 -120 a 0 -120 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 -120 a 0 TeXcolorgray 0 -120
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 -120 a 0 -120 a
SDict begin [/Count -2/Dest (section.1) cvn/Title (Run-time Analysis)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -4/Dest (subsection.1.1) cvn/Title (Pseudo-code)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -0/Dest (subsubsection.1.1.1) cvn/Title (Algorithm 1)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.1.1.2) cvn/Title (Algorithm 2)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.1.1.3) cvn/Title (Algorithm 3)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -0/Dest (subsubsection.1.1.4) cvn/Title (Algorithm 4)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -4/Dest (subsection.1.2) cvn/Title (Asymptotic Analysis)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.1.2.1) cvn/Title (Algorithm 1)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -0/Dest (subsubsection.1.2.2) cvn/Title (Algorithm 2)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.1.2.3) cvn/Title (Algorithm 3)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.1.2.4) cvn/Title (Algorithm 4)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -1/Dest (section.2) cvn/Title (Proofs of Correctness)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -1/Dest (subsubsection.2.0.5) cvn/Title (Algorithm 3)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.2.0.6) cvn/Title (Algorithm 4)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Experimental Analysis)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -2/Dest (section.4) cvn/Title (Extrapolation and interpretation)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -2/Dest (subsection.4.1) cvn/Title (Algorithms 3 and 4, largest dataset in 1 hour?)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -0/Dest (subsubsection.4.1.1) cvn/Title (Algorithm 3)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.4.1.2) cvn/Title (Algorithm 4)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -2/Dest (subsection.4.2) cvn/Title (Experimental runtime and discrepancies)
/OUT pdfmark end
 0 -120 a 0 -120
a
SDict begin [/Count -0/Dest (subsubsection.4.2.1) cvn/Title (Algorithm 3)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/Count -0/Dest (subsubsection.4.2.2) cvn/Title (Algorithm 4)
/OUT pdfmark end
 0 -120 a 0 -120 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 0 -120 a 0 -120
a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 0 -120 a 0 -120 a
SDict begin H.S end
 0 -120 a 0 -120 a
SDict begin 12 H.A end
 0 -120 a 0 -120
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 0 -120 a 2093 -37 a Fj(Eric)27 b(Timmerman,)g(Stephanie)h(Ison,)f
(Geo\013rey)g(Corey)3279 63 y(Octob)r(er)g(23,)g(2013)3384
162 y(CS)h(325)e(Pro)5 b(j)26 b(2)0 304 y
SDict begin H.S end
 0 304 a 0 304
a
SDict begin 12 H.A end
 0 304 a 0 304 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 0 304 a 133 x Fi(1)135 b(Run-time)45
b(Analysis)0 542 y
SDict begin H.S end
 0 542 a 0 542 a
SDict begin 12 H.A end
 0 542 a 0 542 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1) cvn /DEST pdfmark
end
 0
542 a 93 x Fh(1.1)112 b(Pseudo-co)s(de)0 689 y
SDict begin H.S end
 0 689
a 0 689 a
SDict begin 12 H.A end
 0 689 a 0 689 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.1.1) cvn /DEST
pdfmark end
 0 689 a 100 x Fg(1.1.1)94 b(Algorithm)30
b(1)p 0 TeXcolorgray 0 TeXcolorgray 0 942 a Ff(algorithm1)39
b(\(num_list,)h(num_list2\):)174 1041 y(result)h(=)j(algorithm1_help)o
(er\()o(nu)o(m_l)o(is)o(t\))174 1141 y(result2)d(=)i(algorithm1_helper)
o(\(n)o(um_)o(li)o(st)o(2\))174 1241 y(total)f(=)h(result[0])d(-)j
(result2[0])174 1340 y(return)e(total)0 1639 y(algorithm1_helpe)o(r)d
(\(num_list\):)174 1739 y(min)43 b(=)g(sys.maxint)174
1838 y(total)f(=)h(0)174 1938 y(for)g(i)g(in)g(range\(len\(num_l)o(ist)
o(\))37 b(-)44 b(1,)e(-1,)h(-1\):)349 2038 y(total)e(=)i(total)f(+)h
(num_list[i])349 2137 y(if)f(\(abs\(total\))d(<)44 b(min\):)523
2237 y(min)e(=)i(abs\(total\))523 2337 y(left)e(=)h(i)523
2436 y(right)f(=)h(len\(num_list\))174 2536 y(results)e(=)i(\(min,)f
(left,)f(right\))174 2635 y(return)g(results)0 2752 y
SDict begin H.S end

0 2752 a 0 2752 a
SDict begin 12 H.A end
 0 2752 a 0 2752 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.1.2) cvn /DEST
pdfmark end
 0 2752 a 99 x Fg(1.1.2)94
b(Algorithm)30 b(2)p 0 TeXcolorgray 0 TeXcolorgray 0
3004 a Ff(algorithm2)39 b(\(num_list,)h(num_list2\):)174
3104 y(num_list)h(=)i(algorithm2_helpe)o(r)37 b(\(num_list\))174
3204 y(num_list2)j(=)j(algorithm2_helper)37 b(\(num_list2\))174
3303 y(num_list.sort\(\))174 3403 y(num_list2.sort\(\))174
3503 y(min)43 b(=)g(num_list[0])c(-)k(num_list2[0])174
3602 y(return)e(min)0 3801 y(algorithm2_helpe)o(r)d(\(num_list\):)174
3901 y(list)k(=)h([])174 4001 y(total)f(=)h(0)174 4100
y(for)g(i)g(in)g(range\(len\(num_l)o(ist)o(\))37 b(-)44
b(1,)e(-1,)h(-1\):)349 4200 y(total)e(=)i(total)f(+)h(num_list[i])349
4300 y(list.append\(tot)o(al\))174 4399 y(return)e(list)0
4515 y
SDict begin H.S end
 0 4515 a 0 4515 a
SDict begin 12 H.A end
 0 4515 a 0 4515 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.1.3) cvn /DEST
pdfmark end
 0 4515 a 100
x Fg(1.1.3)94 b(Algorithm)30 b(3)p 0 TeXcolorgray 0 TeXcolorgray
0 4768 a Ff(algorithm3)39 b(\(num_list\):)174 4868 y(half)j(=)h
(len\(num_list\))174 4968 y(half)f(=)h(half)f(/)i(2)174
5067 y(first_half)c(=)j(num_list[:)c(half])174 5167 y(second_half)g(=)
44 b(num_list[half:)37 b(])174 5266 y(min_left)k(=)i(algorithm34_help)o
(er)o(\(fi)o(rs)o(t_)o(hal)o(f\))p 0 TeXcolorgray 1929
5529 a Fj(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-8 -436 a
SDict begin H.S end
 -8 -436 a -8 -436 a
SDict begin H.R end
 -8 -436 a -8 -436 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8
-436 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 174
-37 a Ff(min_right)40 b(=)j(algorithm34_helpe)o(r\(s)o(ec)o(on)o(d_h)o
(al)o(f\))174 63 y(second_half.rever)o(se)o(\(\))174
162 y(algorithm1)d(\(first_half,)e(second_half\))0 362
y(algorithm34_help)o(er\()o(ha)o(lf)o(\):)174 461 y(if)43
b(len\(half\))d(<=)j(1:)349 561 y(return)e(0)174 660
y(left)h(=)h(half[)f(:)h(len\(half\))d(/)j(2])174 760
y(right)f(=)h(half[len\(half\))38 b(/)43 b(2)g(:)g(])174
860 y(left_min)e(=)i(algorithm34_help)o(er)o(\(le)o(ft)o(\))174
959 y(right_min)d(=)j(algorithm34_helpe)o(r\(r)o(ig)o(ht)o(\))174
1059 y(cross_min)d(=)j(min\(right\))d(+)j(max\(left\))174
1159 y(return)e(min\(left_min,)e(right_min,)g(cross_min\))0
1293 y
SDict begin H.S end
 0 1293 a 0 1293 a
SDict begin 12 H.A end
 0 1293 a 0 1293 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.1.4) cvn /DEST
pdfmark end
 0 1293 a 81
x Fg(1.1.4)94 b(Algorithm)30 b(4)p 0 TeXcolorgray 0 TeXcolorgray
0 1528 a Ff(algorithm4)39 b(\(num_list\):)174 1627 y(half)j(=)h
(len\(num_list\))174 1727 y(half)f(=)h(half)f(/)i(2)174
1826 y(first_half)c(=)j(num_list[:)c(half])174 1926 y(second_half)g(=)
44 b(num_list[half:)37 b(])174 2026 y(min_left)k(=)i(algorithm34_help)o
(er)o(\(fi)o(rs)o(t_)o(hal)o(f\))174 2125 y(min_right)d(=)j
(algorithm34_helpe)o(r\(s)o(ec)o(on)o(d_h)o(al)o(f\))174
2225 y(second_half.rever)o(se)o(\(\))174 2325 y(algorithm2)d
(\(first_half,)e(second_half\))0 2459 y
SDict begin H.S end
 0 2459 a 0 2459
a
SDict begin 12 H.A end
 0 2459 a 0 2459 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.2) cvn /DEST pdfmark
end
 0 2459 a 98 x Fh(1.2)112 b(Asymptotic)37
b(Analysis)0 2630 y
SDict begin H.S end
 0 2630 a 0 2630 a
SDict begin 12 H.A end
 0 2630 a 0 2630
a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.2.1) cvn /DEST
pdfmark end
 0 2630 a 80 x Fg(1.2.1)94 b(Algorithm)30 b(1)0 2863
y Fj(1)d(for)g(lo)r(op)g(ran)g(t)n(wice)h(n)g(+)f(n)h(=)f(2n)g(=)g
(O\(n\))0 3000 y
SDict begin H.S end
 0 3000 a 0 3000 a
SDict begin 12 H.A end
 0 3000 a 0 3000 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.2.2) cvn /DEST
pdfmark end

0 3000 a 79 x Fg(1.2.2)94 b(Algorithm)30 b(2)0 3233 y
Fj(sort)d(log)f(n)0 3332 y(sort)h(log)f(n)i(=)g(2)f(log)f(n)i(=)g(O)f
(\(n)h(+)f(log)g(n\))0 3469 y
SDict begin H.S end
 0 3469 a 0 3469 a
SDict begin 12 H.A end
 0 3469
a 0 3469 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.2.3) cvn /DEST
pdfmark end
 0 3469 a 79 x Fg(1.2.3)94 b(Algorithm)30 b(3)0
3701 y Fj(n)e(log)f(n)g(x)h(2)f(=)g(2)g(O\(n)h(log)f(n\))h(+)f(O\(n\))0
3838 y
SDict begin H.S end
 0 3838 a 0 3838 a
SDict begin 12 H.A end
 0 3838 a 0 3838 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.1.2.4) cvn /DEST
pdfmark end
 0 3838 a 79
x Fg(1.2.4)94 b(Algorithm)30 b(4)0 4070 y Fj(O\(n)e(log)e(n\))i(+)g
(o\(n\))0 4216 y
SDict begin H.S end
 0 4216 a 0 4216 a
SDict begin 12 H.A end
 0 4216 a 0 4216 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end

0 4216 a 129 x Fi(2)135 b(Pro)t(ofs)45 b(of)g(Correctness)0
4427 y
SDict begin H.S end
 0 4427 a 0 4427 a
SDict begin 12 H.A end
 0 4427 a 0 4427 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.2.0.5) cvn /DEST
pdfmark end
 0 4427 a 100
x Fg(2.0.5)94 b(Algorithm)30 b(3)p 0 TeXcolorgray 0 TeXcolorgray
0 4680 a Ff(If)43 b(we)g(assume)e(that)h(Algorithm)d(1)44
b(is)e(correct.)f(And)h(assume)f(that)h(Algorithm)e(2)j(is)g(not)f
(correct)f(than)h(for)g(all)g(values)0 4879 y(of)h(x)g(algorithm)d(1)j
(y)g(doesn't)e(equal)g(algorithm)f(2's)j(y.)0 5078 y(Given)f(Array1)f
([6,)h(-7,)g(-6])h(and)f(Array2)f([10,)h(-2,)g(15])0
5278 y(Array1)f(sums)h([-7,)g(-13,)g(-6])g(Array2)f(sums)h([23,)g(13,)h
(15])p 0 TeXcolorgray 1929 5529 a Fj(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-8 -436 a
SDict begin H.S end
 -8 -436 a -8 -436 a
SDict begin H.R end
 -8 -436 a -8 -436 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -8
-436 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
63 a Ff(Algorithm)40 b(1)j(would)f(return)f(-13)h(as)h(the)f(min)g(of)h
(Array1)e(and)i(find)f(13)g(of)h(Array2)e(the)i(Sum)f(Closest)f(to)h
(Zero)g(=)h(0)0 262 y(Algorithm)d(2)j(would)f(combine)e(and)j(sort)f
(the)g(arrays)f(into)h(NewArray)e([-13,)i(-7,)g(-6,)g(13,)h(15,)f(23])g
(then)g(compares)0 461 y(NewArray[0])d(+)k(NewArray)d([Array1Size+1])e
(which)k(would)f(return)g(the)i(Sum)f(0.)h(Algorithm)d(1)j(and)f(2)h
(have)0 660 y(returned)d(the)j(same)f(result)f(which)g(is)i(a)g
(contradiction)38 b(to)43 b(the)f(condition)e(of)j(Algorithm)d(2)j
(being)f(not)g(correct)f(thus)0 860 y(it)i(must)f(be)g(correct.)0
976 y
SDict begin H.S end
 0 976 a 0 976 a
SDict begin 12 H.A end
 0 976 a 0 976 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.2.0.6) cvn /DEST
pdfmark end
 0 976 a 99 x Fg(2.0.6)94
b(Algorithm)30 b(4)p 0 TeXcolorgray 0 TeXcolorgray 0
1229 a Ff(Base)42 b(Case:)f(Array)h(A)h(of)g(length)e(=)i(1,)g(that)f
(is)h(the)f(closest)f(to)h(zero)g(value.)0 1428 y(Inductive)e
(Hypothesis:)f(For)j(size)g(array)g(N)h(the)f(subarray)e(of)j(size)f(k)
h(such)f(that)g(0)h(<)h(k)f(<)g(n)g(is)g(contained)d(entirely)g(in)0
1627 y(the)i(first)g(half,)f(second)g(half,)h(or)h(a)g(combination)c
(of)k(the)f(suffix)f(of)i(the)f(first)g(half)g(and)g(a)h(prefix)e(of)i
(the)f(second)g(half.)0 1826 y(Inductive)e(Step:)0 2026
y(By)j(the)f(Inductive)e(Hypothesis)f(if)k(array)f(of)g(size)g(n+1)h
(there)e(will)h(still)g(be)g(a)i(subarray)c(of)j(size)f(k)h(such)f
(that)g(k)h(<)g(n)g(and)0 2225 y(k+1)f(is)h(still)f(less)g(than)f(or)i
(equal)f(to)h(n,)f(which)g(is)h(still)e(a)i(subarray.)0
2369 y
SDict begin H.S end
 0 2369 a 0 2369 a
SDict begin 12 H.A end
 0 2369 a 0 2369 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 0 2369 a 131
x Fi(3)135 b(Exp)t(erimen)l(tal)46 b(Analysis)p 0 TeXcolorgray
0 TeXcolorgray 0 2681 a Ff(Size)173 b(Alg1)42 b(Alg2)g(Alg3)f(Alg4)0
2781 y(----------------)o(---)o(--)o(--)o(---)o(--)o(---)o(--)o(---)o
(--)o(--)o(---)o(--)o(---)o(--)o(--)o(---)o(--)o(---)o(--)o(--)0
2881 y(100)86 b(0.000048)e(0.000071)g(0.000204)g(0.000205)0
2980 y(200)i(0.000080)e(0.000142)g(0.000406)g(0.000427)0
3080 y(300)i(0.000132)e(0.000208)g(0.000624)g(0.000640)0
3179 y(400)i(0.000158)e(0.000279)g(0.000829)g(0.000891)0
3279 y(500)i(0.000205)e(0.000352)g(0.001029)g(0.001090)0
3379 y(600)i(0.000247)e(0.000426)g(0.001244)g(0.001356)0
3478 y(700)i(0.000275)e(0.000497)g(0.001471)g(0.001556)0
3578 y(800)i(0.000321)e(0.000562)g(0.001669)g(0.001808)0
3678 y(900)i(0.000359)e(0.000646)g(0.001898)g(0.002022)0
3777 y(1000)i(0.000397)d(0.000736)h(0.002118)g(0.002253)0
3877 y(2000)i(0.000806)d(0.001521)h(0.004337)g(0.004686)0
3977 y(3000)i(0.001202)d(0.002341)h(0.006573)g(0.007170)0
4076 y(4000)i(0.001639)d(0.003239)h(0.008775)g(0.009639)0
4176 y(5000)i(0.002064)d(0.004109)h(0.011191)g(0.012194)0
4275 y(6000)i(0.002505)d(0.005031)h(0.013523)g(0.015289)0
4375 y(7000)i(0.002942)d(0.006053)h(0.015657)g(0.017358)0
4475 y(8000)i(0.003422)d(0.006966)h(0.017911)g(0.019886)0
4574 y(9000)i(0.003974)d(0.007976)h(0.020761)g(0.022506)0
4674 y(10000)h(0.004731)f(0.009098)g(0.022931)g(0.025944)p
0 TeXcolorgray 1929 5529 a Fj(3)p 0 TeXcolorgray eop
end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-8 -436 a
SDict begin H.S end
 -8 -436 a -8 -436 a
SDict begin H.R end
 -8 -436 a -8 -436 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -8
-436 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
2610 a @beginspecial 50 @llx 50 @lly 410 @urx 302 @ury
4680 @rwi @setspecial
%%BeginDocument: graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: ./graph.eps
%%Creator: gnuplot 4.6 patchlevel 3
%%CreationDate: Wed Oct 23 22:09:45 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color false def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/SuppressPDFMark false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
/BackgroundColor {-1.000 -1.000 -1.000} def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 302 lineto 50 302 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.6 (September 2012)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
  clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
Level1 SuppressPDFMark or 
{} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (./graph.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.6 patchlevel 3)
  /Author (coreyg)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Wed Oct 23 22:09:45 2013)
  /DOCINFO pdfmark
end
} ifelse
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
BackgroundColor 0 lt 3 1 roll 0 lt exch 0 lt or or not {BackgroundColor C 1.000 0 0 7200.00 5040.00 BoxColFill} if
1.000 UL
LTb
938 448 M
63 0 V
5946 0 R
-63 0 V
854 448 M
( 1e-05) Rshow
1.000 UL
LTb
938 762 M
31 0 V
5978 0 R
-31 0 V
938 1177 M
31 0 V
5978 0 R
-31 0 V
938 1390 M
31 0 V
5978 0 R
-31 0 V
938 1491 M
63 0 V
5946 0 R
-63 0 V
-6030 0 R
( 0.0001) Rshow
1.000 UL
LTb
938 1805 M
31 0 V
5978 0 R
-31 0 V
938 2220 M
31 0 V
5978 0 R
-31 0 V
938 2432 M
31 0 V
5978 0 R
-31 0 V
938 2534 M
63 0 V
5946 0 R
-63 0 V
-6030 0 R
( 0.001) Rshow
1.000 UL
LTb
938 2847 M
31 0 V
5978 0 R
-31 0 V
938 3262 M
31 0 V
5978 0 R
-31 0 V
938 3475 M
31 0 V
5978 0 R
-31 0 V
938 3576 M
63 0 V
5946 0 R
-63 0 V
-6030 0 R
( 0.01) Rshow
1.000 UL
LTb
938 3890 M
31 0 V
5978 0 R
-31 0 V
938 4305 M
31 0 V
5978 0 R
-31 0 V
938 4518 M
31 0 V
5978 0 R
-31 0 V
938 4619 M
63 0 V
5946 0 R
-63 0 V
-6030 0 R
( 0.1) Rshow
1.000 UL
LTb
938 448 M
0 63 V
0 4108 R
0 -63 V
938 308 M
( 100) Cshow
1.000 UL
LTb
1842 448 M
0 31 V
0 4140 R
0 -31 V
2372 448 M
0 31 V
0 4140 R
0 -31 V
2747 448 M
0 31 V
0 4140 R
0 -31 V
3038 448 M
0 31 V
0 4140 R
0 -31 V
3276 448 M
0 31 V
0 4140 R
0 -31 V
3477 448 M
0 31 V
0 4140 R
0 -31 V
3651 448 M
0 31 V
0 4140 R
0 -31 V
3805 448 M
0 31 V
0 4140 R
0 -31 V
3943 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 1000) Cshow
1.000 UL
LTb
4847 448 M
0 31 V
0 4140 R
0 -31 V
5376 448 M
0 31 V
0 4140 R
0 -31 V
5751 448 M
0 31 V
0 4140 R
0 -31 V
6043 448 M
0 31 V
0 4140 R
0 -31 V
6280 448 M
0 31 V
0 4140 R
0 -31 V
6482 448 M
0 31 V
0 4140 R
0 -31 V
6656 448 M
0 31 V
0 4140 R
0 -31 V
6810 448 M
0 31 V
0 4140 R
0 -31 V
6947 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 10000) Cshow
1.000 UL
LTb
1.000 UL
LTb
938 4619 N
938 448 L
6009 0 V
0 4171 V
-6009 0 V
Z stroke
LCb setrgbcolor
112 2533 M
currentpoint gsave translate -270 rotate 0 0 M
(Runtime \(seconds\)) Cshow
grestore
LTb
LCb setrgbcolor
3942 98 M
(Array Size) Cshow
LTb
3942 4829 M
(Enumeration Times vs. Array Size) Cshow
1.000 UP
1.000 UL
LTb
% Begin plot #1
1.000 UL
LT0
0.00 0.00 1.00 C LCb setrgbcolor
6296 4486 M
(Alg1) Rshow
LT0
0.00 0.00 1.00 C 6380 4486 M
399 0 V
938 1158 M
904 232 V
530 226 V
375 82 V
291 118 V
238 84 V
201 49 V
174 70 V
154 51 V
137 45 V
905 321 V
529 181 V
375 140 V
292 105 V
237 87 V
202 73 V
174 69 V
154 67 V
137 79 V
% End plot #1
% Begin plot #2
stroke
LT1
1.00 0.00 0.00 C LCb setrgbcolor
6296 4346 M
(Alg2) Rshow
LT1
1.00 0.00 0.00 C 6380 4346 M
399 0 V
938 1336 M
904 314 V
530 172 V
375 133 V
291 106 V
238 86 V
201 70 V
174 56 V
154 63 V
137 59 V
905 328 V
529 196 V
375 147 V
292 107 V
237 92 V
202 84 V
174 64 V
154 61 V
137 59 V
% End plot #2
% Begin plot #3
stroke
LT2
0.00 1.00 0.00 C LCb setrgbcolor
6296 4206 M
(Alg3) Rshow
LT2
0.00 1.00 0.00 C 6380 4206 M
399 0 V
938 1814 M
904 311 V
530 195 V
375 129 V
291 97 V
238 86 V
201 76 V
174 57 V
154 59 V
137 49 V
905 325 V
529 188 V
375 131 V
292 110 V
237 86 V
202 66 V
174 61 V
154 67 V
137 45 V
% End plot #3
% Begin plot #4
stroke
LT3
0.00 0.00 0.00 C LCb setrgbcolor
6296 4066 M
(Alg4) Rshow
LT3
0.00 0.00 0.00 C 6380 4066 M
399 0 V
938 1816 M
904 332 V
530 183 V
375 150 V
291 92 V
238 98 V
201 63 V
174 68 V
154 50 V
137 49 V
905 332 V
529 193 V
375 134 V
292 106 V
237 103 V
202 57 V
174 62 V
154 56 V
137 64 V
% End plot #4
stroke
LTb
938 4619 N
938 448 L
6009 0 V
0 4171 V
-6009 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 2738 x @beginspecial 50 @llx 50 @lly 410
@urx 302 @ury 4680 @rwi @setspecial
%%BeginDocument: graph2.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: ./graph2.eps
%%Creator: gnuplot 4.6 patchlevel 3
%%CreationDate: Wed Oct 23 22:13:05 2013
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color false def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/SuppressPDFMark false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
/BackgroundColor {-1.000 -1.000 -1.000} def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 410 50 lineto 410 302 lineto 50 302 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.6 (September 2012)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
  clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
Level1 SuppressPDFMark or 
{} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (./graph2.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.6 patchlevel 3)
  /Author (coreyg)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Wed Oct 23 22:13:05 2013)
  /DOCINFO pdfmark
end
} ifelse
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
BackgroundColor 0 lt 3 1 roll 0 lt exch 0 lt or or not {BackgroundColor C 1.000 0 0 7200.00 5040.00 BoxColFill} if
1.000 UL
LTb
854 447 M
63 0 V
6030 0 R
-63 0 V
770 447 M
( 0) Rshow
1.000 UL
LTb
854 864 M
63 0 V
6030 0 R
-63 0 V
770 864 M
( 0.005) Rshow
1.000 UL
LTb
854 1282 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.01) Rshow
1.000 UL
LTb
854 1699 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.015) Rshow
1.000 UL
LTb
854 2116 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.02) Rshow
1.000 UL
LTb
854 2533 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.025) Rshow
1.000 UL
LTb
854 2950 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.03) Rshow
1.000 UL
LTb
854 3367 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.035) Rshow
1.000 UL
LTb
854 3785 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.04) Rshow
1.000 UL
LTb
854 4202 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.045) Rshow
1.000 UL
LTb
854 4619 M
63 0 V
6030 0 R
-63 0 V
-6114 0 R
( 0.05) Rshow
1.000 UL
LTb
1408 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 1000) Cshow
1.000 UL
LTb
2023 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 2000) Cshow
1.000 UL
LTb
2639 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 3000) Cshow
1.000 UL
LTb
3254 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 4000) Cshow
1.000 UL
LTb
3870 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 5000) Cshow
1.000 UL
LTb
4485 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 6000) Cshow
1.000 UL
LTb
5101 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 7000) Cshow
1.000 UL
LTb
5716 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 8000) Cshow
1.000 UL
LTb
6332 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 9000) Cshow
1.000 UL
LTb
6947 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 10000) Cshow
1.000 UL
LTb
1.000 UL
LTb
854 4619 N
854 448 L
6093 0 V
0 4171 V
-6093 0 V
Z stroke
LCb setrgbcolor
112 2533 M
currentpoint gsave translate -270 rotate 0 0 M
(Runtime \(seconds\)) Cshow
grestore
LTb
LCb setrgbcolor
3900 98 M
(Array Size) Cshow
LTb
3900 4829 M
(Enumeration Times vs. Array Size) Cshow
1.000 UP
1.000 UL
LTb
% Begin plot #1
1.000 UL
LT0
0.00 0.00 1.00 C LCb setrgbcolor
6296 4486 M
(Alg1) Rshow
LT0
0.00 0.00 1.00 C 6380 4486 M
399 0 V
854 451 M
62 3 V
61 4 V
62 2 V
61 4 V
62 4 V
61 2 V
62 4 V
61 3 V
62 3 V
615 34 V
616 33 V
615 37 V
616 35 V
615 37 V
616 37 V
615 40 V
616 46 V
615 63 V
% End plot #1
% Begin plot #2
stroke
LT1
1.00 0.00 0.00 C LCb setrgbcolor
6296 4346 M
(Alg2) Rshow
LT1
1.00 0.00 0.00 C 6380 4346 M
399 0 V
854 453 M
62 6 V
61 6 V
62 5 V
61 7 V
62 6 V
61 6 V
62 5 V
61 7 V
62 8 V
615 65 V
616 68 V
615 75 V
616 73 V
615 77 V
616 85 V
615 76 V
616 85 V
615 93 V
% End plot #2
% Begin plot #3
stroke
LT2
0.00 1.00 0.00 C LCb setrgbcolor
6296 4206 M
(Alg3) Rshow
LT2
0.00 1.00 0.00 C 6380 4206 M
399 0 V
854 464 M
62 17 V
61 18 V
62 17 V
61 17 V
62 18 V
61 19 V
62 16 V
61 20 V
62 18 V
615 185 V
616 187 V
615 183 V
616 202 V
615 194 V
616 179 V
615 188 V
616 237 V
615 181 V
% End plot #3
% Begin plot #4
stroke
LT3
0.00 0.00 0.00 C LCb setrgbcolor
6296 4066 M
(Alg4) Rshow
LT3
0.00 0.00 0.00 C 6380 4066 M
399 0 V
854 464 M
62 19 V
61 18 V
62 21 V
61 16 V
62 22 V
61 17 V
62 21 V
61 18 V
62 19 V
615 203 V
616 207 V
615 206 V
616 214 V
615 258 V
616 172 V
615 211 V
616 219 V
615 287 V
% End plot #4
stroke
LTb
854 4619 N
854 448 L
6093 0 V
0 4171 V
-6093 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage

%%EndDocument
 @endspecial 0 TeXcolorgray 1929 5529 a Fj(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-8 -436 a
SDict begin H.S end
 -8 -436 a -8 -436 a
SDict begin H.R end
 -8 -436 a -8 -436 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -8
-436 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
-120 a
SDict begin H.S end
 0 -120 a 0 -120 a
SDict begin 12 H.A end
 0 -120 a 0 -120 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 0 -120 a 83
x Fi(4)135 b(Extrap)t(olation)47 b(and)d(in)l(terpretation)0
68 y
SDict begin H.S end
 0 68 a 0 68 a
SDict begin 12 H.A end
 0 68 a 0 68 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.1) cvn /DEST pdfmark
end
 0 68 a 93 x Fh(4.1)112
b(Algorithms)38 b(3)f(and)i(4,)e(largest)h(dataset)g(in)g(1)f(hour?)0
234 y
SDict begin H.S end
 0 234 a 0 234 a
SDict begin 12 H.A end
 0 234 a 0 234 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.1) cvn /DEST
pdfmark end
 0 234 a 81 x Fg(4.1.1)94
b(Algorithm)30 b(3)0 468 y Fj(Using)20 b(2)f(data)g(p)r(oin)n(ts)h
(from)f(the)h(timing)h(results)e(in)h(algorithm)e(3)i(\(0.000204s,)e
(100)g(and)i(0.022931s,)e(10000\))f(and)j(plugging)0
568 y(them)28 b(in)n(to)g(the)g(equation:)1557 735 y
SDict begin H.S end

1557 735 a 1557 735 a
SDict begin 12 H.A end
 1557 735 a 1557 735 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.1) cvn /DEST pdfmark
end
 1557 735
a Fe(S)5 b(l)r(ope)22 b Fj(=)h Fe(m)g Fj(=)2064 666 y
Fe(l)r(og)s Fj(\()2216 632 y Fd(F)2258 640 y Fc(1)p 2216
647 75 4 v 2216 694 a Fd(F)2258 702 y Fc(0)2300 666 y
Fj(\))p 2064 716 269 4 v 2066 792 a Fe(l)r(og)s Fj(\()2218
758 y Fd(x)2256 766 y Fc(1)p 2218 773 71 4 v 2218 821
a Fd(x)2256 829 y Fc(0)2298 792 y Fj(\))3794 735 y(\(1\))125
945 y(resuls)30 b(in)i Fe(m)e Fj(=)g(1)p Fe(:)p Fj(0254)f(as)i(a)g(log)
g(slop)r(e)h(for)f(the)h(run)n(time)g(of)f(Algorithm)h(4.)48
b(Using)32 b(this)g(v)-5 b(alue)32 b(and)f(the)h(previous)0
1044 y(equation\()p 1 0 0 TeXcolorrgb 344 1044 a
SDict begin H.S end
 344
1044 a 1 0 0 TeXcolorrgb Fj(2)p 1 0 0 TeXcolorrgb 385
991 a
SDict begin H.R end
 385 991 a 385 1044 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (equation.4.2) cvn H.B /ANN pdfmark end
 385 1044 a 0 TeXcolorgray
Fj(\),)f(w)n(e)e(plug)g(in)h(1)f(kno)n(w)g(data)g(p)r(oin)n(t)h
(\(0.000204)c(seconds)j(for)g(an)g(arra)n(y)e(of)j(size)f(100\))f(and)i
(the)g(kno)n(wn)f(time)0 1144 y(in)f(1)f(hour)g(and)g(solv)n(e)g(for)g
(the)h(arra)n(y)d(size.)1547 1383 y(1)p Fe(:)p Fj(0254)c(=)1898
1322 y Fe(l)r(og)s Fj(\()2109 1289 y Fb(3600)p 2050 1303
252 4 v 2050 1351 a(0)p Fd(:)p Fb(000204)2311 1322 y
Fj(\))p 1898 1364 446 4 v 1974 1440 a Fe(l)r(og)s Fj(\()2156
1407 y Fd(x)p 2126 1421 100 4 v 2126 1469 a Fb(100)2235
1440 y Fj(\))0 1584 y(and)27 b(w)n(e)h(get)f(that)h Fe(x)23
b Fj(=)g(1)p Fe(;)14 b Fj(167)p Fe(;)g Fj(260)p Fe(;)g
Fj(000.)125 1684 y(*used)p 0 TeXcolorgray 356 1702 a
SDict begin H.S end

356 1702 a 0 TeXcolorgray -18 x Ff(http://en.wikip)o(edi)o(a.)o(org)o
(/w)o(ik)o(i/L)o(og)o(-)t(lo)o(g_)o(plo)o(t)p 0 TeXcolorgray
2147 1626 a
SDict begin H.R end
 2147 1626 a 2147 1684 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://en.wikipedia.org/wiki/Log-log_plot)>>/Subtype
/Link H.B /ANN pdfmark end
 2147 1684 a 0 TeXcolorgray
27 w Fj(for)28 b(help)f(understanding)g(log)g(slop)r(e.)0
1819 y
SDict begin H.S end
 0 1819 a 0 1819 a
SDict begin 12 H.A end
 0 1819 a 0 1819 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.2) cvn /DEST
pdfmark end
 0 1819 a 81
x Fg(4.1.2)94 b(Algorithm)30 b(4)0 2053 y Fj(Using)20
b(2)f(data)g(p)r(oin)n(ts)h(from)f(the)h(timing)h(results)e(in)h
(algorithm)e(4)i(\(0.000205s,)e(100)g(and)i(0.025944s,)e(10000\))f(and)
j(plugging)0 2153 y(them)28 b(in)n(to)g(the)g(equation:)1557
2320 y
SDict begin H.S end
 1557 2320 a 1557 2320 a
SDict begin 12 H.A end
 1557 2320 a 1557 2320
a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.2) cvn /DEST pdfmark
end
 1557 2320 a Fe(S)5 b(l)r(ope)22 b Fj(=)h Fe(m)g Fj(=)2064
2251 y Fe(l)r(og)s Fj(\()2216 2217 y Fd(F)2258 2225 y
Fc(1)p 2216 2232 75 4 v 2216 2280 a Fd(F)2258 2288 y
Fc(0)2300 2251 y Fj(\))p 2064 2301 269 4 v 2066 2377
a Fe(l)r(og)s Fj(\()2218 2343 y Fd(x)2256 2351 y Fc(1)p
2218 2358 71 4 v 2218 2406 a Fd(x)2256 2414 y Fc(0)2298
2377 y Fj(\))3794 2320 y(\(2\))125 2530 y(resuls)30 b(in)i
Fe(m)e Fj(=)g(1)p Fe(:)p Fj(0254)f(as)i(a)g(log)g(slop)r(e)h(for)f(the)
h(run)n(time)g(of)f(Algorithm)h(4.)48 b(Using)32 b(this)g(v)-5
b(alue)32 b(and)f(the)h(previous)0 2629 y(equation\()p
1 0 0 TeXcolorrgb 344 2629 a
SDict begin H.S end
 344 2629 a 1 0 0 TeXcolorrgb
Fj(2)p 1 0 0 TeXcolorrgb 385 2576 a
SDict begin H.R end
 385 2576 a 385 2629
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (equation.4.2) cvn H.B /ANN pdfmark end
 385 2629 a 0 TeXcolorgray Fj(\),)f(w)n(e)e(plug)g(in)h(1)f(kno)n(w)g
(data)g(p)r(oin)n(t)h(\(0.000204)c(seconds)j(for)g(an)g(arra)n(y)e(of)j
(size)f(100\))f(and)i(the)g(kno)n(wn)f(time)0 2729 y(in)f(1)f(hour)g
(and)g(solv)n(e)g(for)g(the)h(arra)n(y)d(size.)1526 2968
y(1)p Fe(:)p Fj(04738)20 b(=)1919 2907 y Fe(l)r(og)s
Fj(\()2130 2875 y Fb(3600)p 2070 2889 252 4 v 2070 2936
a(0)p Fd(:)p Fb(000205)2332 2907 y Fj(\))p 1919 2949
446 4 v 1995 3025 a Fe(l)r(og)s Fj(\()2177 2992 y Fd(x)p
2146 3006 100 4 v 2146 3054 a Fb(100)2256 3025 y Fj(\))0
3170 y(and)27 b(w)n(e)h(get)f(that)h Fe(x)23 b Fj(=)g(825)p
Fe(;)14 b Fj(713)p Fe(;)g Fj(000.)125 3269 y(*used)p
0 TeXcolorgray 356 3288 a
SDict begin H.S end
 356 3288 a 0 TeXcolorgray -19
x Ff(http://en.wikip)o(edi)o(a.)o(org)o(/w)o(ik)o(i/L)o(og)o(-)t(lo)o
(g_)o(plo)o(t)p 0 TeXcolorgray 2147 3212 a
SDict begin H.R end
 2147 3212
a 2147 3269 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://en.wikipedia.org/wiki/Log-log_plot)>>/Subtype
/Link H.B /ANN pdfmark end
 2147 3269 a 0 TeXcolorgray 27 w Fj(for)28
b(help)f(understanding)g(log)g(slop)r(e.)0 3404 y
SDict begin H.S end
 0 3404
a 0 3404 a
SDict begin 12 H.A end
 0 3404 a 0 3404 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.2) cvn /DEST pdfmark
end
 0 3404 a 98 x Fh(4.2)112
b(Exp)s(erimen)m(tal)39 b(run)m(time)f(and)g(discrepancies)0
3575 y
SDict begin H.S end
 0 3575 a 0 3575 a
SDict begin 12 H.A end
 0 3575 a 0 3575 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.2.1) cvn /DEST
pdfmark end
 0 3575 a 80
x Fg(4.2.1)94 b(Algorithm)30 b(3)0 3808 y Fj(Our)24 b(asymptotic)h
(analysis)f(said)h(that)g(algorithm)f(3)h(should)g(b)r(e)g(at)g(least)g
Fe(O)r Fj(\()p Fe(nl)r(og)s(n)p Fj(\),)h(but)g(the)f(run)n(time)g
(graph)f(sho)n(w)n(ed)g(a)0 3908 y(graph)f(that)h(represen)n(ted)e(a)h
(more)g Fe(C)1173 3920 y Fb(1)1222 3908 y Fa(\003)11
b Fe(n)g Fj(+)g Fe(C)1471 3920 y Fb(2)1530 3908 y Fj(run)n(time.)36
b(This)23 b(could)h(b)r(e)g(due)g(to)f(ho)n(w)g(w)n(e)h(implemen)n(ted)
g(the)g(algorithm)0 4007 y(as)j(w)n(ell)g(as)g(optimizations)g(tak)n
(en)g(b)n(y)h(the)g(p)n(ython)f(in)n(terpreter.)0 4140
y
SDict begin H.S end
 0 4140 a 0 4140 a
SDict begin 12 H.A end
 0 4140 a 0 4140 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.2.2) cvn /DEST
pdfmark end
 0 4140 a 83 x Fg(4.2.2)94
b(Algorithm)30 b(4)0 4376 y Fj(As)g(with)g(Algorithm)f(3,)h(our)f
(asymptotic)g(analysis)f(said)i(that)g(Algorithm)f(4)g(should)h(b)r(e)g
(dominated)f(b)n(y)h(b)n(y)f Fe(O)r Fj(\()p Fe(nl)r(og)s(n)p
Fj(\))0 4476 y(but)h(the)f(run)n(time)g(graph)f(represen)n(ted)g(a)g
(more)h(linear)f(run)n(time)h(\()p Fe(C)2207 4488 y Fb(1)2264
4476 y Fa(\003)19 b Fe(n)g Fj(+)g Fe(C)2537 4488 y Fb(2)2575
4476 y Fj(\).)41 b(W)-7 b(e)30 b(v)n(ery)e(w)n(ell)g(could)h(ha)n(v)n
(e)f(done)h(the)0 4576 y(algorithm)24 b(incorrectly)g(or)g(the)i(p)n
(ython)f(in)n(terpreter)f(could)h(ha)n(v)n(e)f(in)n(tro)r(duced)h(some)
g(optimizations)g(that)g(are)g(unkno)n(wn)0 4675 y(to)i(us.)p
0 TeXcolorgray 1929 5529 a(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
