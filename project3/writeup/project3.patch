--- ../linux/drivers/block/Makefile	2012-10-08 07:32:26.228555000 -0700
+++ project3/drivers/block/Makefile	2013-05-13 20:25:01.908076984 -0700
@@ -40,4 +40,6 @@
 obj-$(CONFIG_BLK_DEV_DRBD)     += drbd/
 obj-$(CONFIG_BLK_DEV_RBD)     += rbd.o
 
+obj-$(CONFIG_BLK_CRYPT_RAMDISK) 	+= ramdisk.o
+
 swim_mod-y	:= swim.o swim_asm.o
--- ../linux/drivers/block/Kconfig	2012-10-08 07:32:26.228555000 -0700
+++ project3/drivers/block/Kconfig	2013-05-13 19:49:10.933897721 -0700
@@ -527,4 +527,13 @@
 
 	  If unsure, say N.
 
+config BLK_CRYPT_RAMDISK
+	tristate "Encrypted Ramdisk Block Driver"
+	depends BLOCK
+	select CRYPTO_AES
+	select CRYPTO
+	default n
+	---help---
+	  Encrypted ramdisk block device.
+
 endif # BLK_DEV
--- ../linux/drivers/block/ramdisk.c	1969-12-31 16:00:00.000000000 -0800
+++ project3/drivers/block/ramdisk.c	2013-05-13 19:18:30.355742834 -0700
@@ -0,0 +1,273 @@
+/*
+ * A sample, extra-simple block driver. Updated for kernel 2.6.31.
+ * Works on: Ubuntu 13.04 w/ Kernel 3.8.0-19,
+ * 		Arch Linux kernel 3.9.2-1
+ * 		Squiddley kernel 3.0.4
+ *
+ * (C) 2003 Eklektix, Inc.
+ * (C) 2010 Pat Patterson <pat at superpat dot com>
+ * Redistributable under the terms of the GNU GPL.
+ * Base ramdisk from:
+ * http://blog.superpat.com/2010/05/04/a-simple-block-driver-for-linux-kernel
+ * -2-6-31/
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+
+#include <linux/kernel.h> /* printk() */
+#include <linux/fs.h>     /* everything... */
+#include <linux/errno.h>  /* error codes */
+#include <linux/types.h>  /* size_t */
+#include <linux/vmalloc.h>
+#include <linux/genhd.h>
+#include <linux/blkdev.h>
+#include <linux/hdreg.h>
+#include <linux/crypto.h>
+
+MODULE_LICENSE("Dual BSD/GPL");
+
+static int major_num = 0;
+module_param(major_num, int, 0);
+static int logical_block_size = 512;
+module_param(logical_block_size, int, 0);
+static int nsectors = 1024; /* How big the drive is */
+module_param(nsectors, int, 0600);
+//static char * key = "fibonacci112357";
+//module_param(key, charp, S_IRUGO);
+
+#define KEY_SIZE 32 /* AES has a maximum key size of 256 bits */
+static char crypto_key[KEY_SIZE];
+static int key_size = 0; /* size of the current key */
+
+/*
+ * We can tweak our hardware sector size, but the kernel talks to us
+ * in terms of small sectors, always.
+ */
+#define KERNEL_SECTOR_SIZE 512
+
+/*
+ * Our request queue.
+ */
+static struct request_queue *Queue;
+
+/*
+ * The internal representation of our device.
+ */
+static struct sbd_device {
+	unsigned long size;
+	spinlock_t lock;
+	u8 *data;
+	struct gendisk *gd;
+} Device;
+
+struct crypto_cipher *tfm;
+
+ssize_t key_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	printk(KERN_DEBUG "sbd: copying key\n");
+	return scnprintf(buf, PAGE_SIZE, "%s\n", crypto_key);
+}
+
+ssize_t key_store(struct device *dev, struct device_attribute *attr,
+                  const char *buf, size_t count)
+{
+	if (count != 16 && count != 24 && count != 32) {
+		printk(KERN_WARNING "sbd: invalid key size %lu\n", (unsigned long)count);
+		return -EINVAL;
+	}
+
+	printk(KERN_DEBUG "sbd: storing key\n");
+	snprintf(crypto_key, sizeof(crypto_key), "%.*s",
+		 (int)min(count, sizeof(crypto_key) - 1), buf);
+	key_size = count;
+	return count;
+}
+
+DEVICE_ATTR(key, 0600, key_show, key_store);
+
+static void rd_root_dev_release(struct device *dev)
+{
+}
+
+/* our device for sysfs */
+static struct device rd_root_dev = {
+	.init_name = "sbd",
+	.release = rd_root_dev_release,
+};
+
+/*
+ * Handle an I/O request.
+ */
+static void sbd_transfer(struct sbd_device *dev, sector_t sector,
+		unsigned long nsect, char *buffer, int write) {
+	unsigned long offset = sector * logical_block_size;
+	unsigned long nbytes = nsect * logical_block_size;
+
+	int k;
+
+	if(key_size == 0){
+		printk(KERN_INFO "no key set\n");
+	}else{
+		crypto_cipher_clear_flags(tfm, ~0);
+		crypto_cipher_setkey(tfm, crypto_key, key_size);
+	}
+
+	if ((offset + nbytes) > dev->size) {
+		printk (KERN_NOTICE "sbd: Beyond-end write (%ld %ld)\n", 
+							offset, nbytes);
+		return;
+	}
+	if (write){
+		if(key_size != 0){
+			for (k = 0; k < nbytes; k+= 
+						crypto_cipher_blocksize(tfm)) {
+				crypto_cipher_encrypt_one(tfm, dev->data+
+							offset+k, buffer+k);
+			}
+		}else{
+			memcpy(dev->data + offset, buffer, nbytes);
+		}
+	}else{
+		if(key_size != 0){
+			for (k = 0; k < nbytes; k+= 
+						crypto_cipher_blocksize(tfm)) {
+				crypto_cipher_decrypt_one(tfm, buffer+k, 
+							dev->data+offset+k);
+			}
+		}else{
+			memcpy(buffer, dev->data + offset, nbytes);
+		}
+	}
+}
+
+static void sbd_request(struct request_queue *q) {
+	struct request *req;
+
+	req = blk_fetch_request(q);
+	while (req != NULL) {
+		// blk_fs_request() was removed in 2.6.36 - many thanks to
+		// Christian Paro for the heads up and fix...
+		//if (!blk_fs_request(req)) {
+		if (req == NULL || (req->cmd_type != REQ_TYPE_FS)) {
+			printk (KERN_NOTICE "Skip non-CMD request\n");
+			__blk_end_request_all(req, -EIO);
+			continue;
+		}
+		sbd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
+				req->buffer, rq_data_dir(req));
+		if ( ! __blk_end_request_cur(req, 0) ) {
+			req = blk_fetch_request(q);
+		}
+	}
+}
+
+/*
+ * The HDIO_GETGEO ioctl is handled in blkdev_ioctl(), which
+ * calls this. We need to implement getgeo, since we can't
+ * use tools such as fdisk to partition the drive otherwise.
+ */
+int sbd_getgeo(struct block_device * block_device, struct hd_geometry * geo) {
+	long size;
+
+	/* We have no real geometry, of course, so make something up. */
+	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+	geo->cylinders = (size & ~0x3f) >> 6;
+	geo->heads = 4;
+	geo->sectors = 16;
+	geo->start = 0;
+	return 0;
+}
+
+/*
+ * The device operations structure.
+ */
+static struct block_device_operations sbd_ops = {
+		.owner  = THIS_MODULE,
+		.getgeo = sbd_getgeo
+};
+
+static int __init sbd_init(void) {
+	/*
+	 * Set up our internal device.
+	 */
+
+	int ret;
+
+	tfm = crypto_alloc_cipher("aes", 0, 16);
+	if (IS_ERR(tfm)){
+		printk(KERN_ERR "alg: cipher: Failed to load transform");
+		return PTR_ERR(tfm);
+	}
+	Device.size = nsectors * logical_block_size;
+	spin_lock_init(&Device.lock);
+	Device.data = vmalloc(Device.size);
+	if (Device.data == NULL)
+		return -ENOMEM;
+	/*
+	 * Get a request queue.
+	 */
+	Queue = blk_init_queue(sbd_request, &Device.lock);
+	if (Queue == NULL)
+		goto out;
+	blk_queue_logical_block_size(Queue, logical_block_size);
+	/*
+	 * Get registered.
+	 */
+	major_num = register_blkdev(major_num, "sbd");
+	if (major_num < 0) {
+		printk(KERN_WARNING "sbd: unable to get major number\n");
+		goto out;
+	}
+	/*
+	 * And the gendisk structure.
+	 */
+	Device.gd = alloc_disk(16);
+	if (!Device.gd)
+		goto out_unregister;
+	Device.gd->major = major_num;
+	Device.gd->first_minor = 0;
+	Device.gd->fops = &sbd_ops;
+	Device.gd->private_data = &Device;
+	strcpy(Device.gd->disk_name, "sbd0");
+	set_capacity(Device.gd, nsectors);
+	Device.gd->queue = Queue;
+	add_disk(Device.gd);
+
+	ret = device_register(&rd_root_dev);
+	if (ret < 0)
+		goto out_unregister;
+
+	ret = device_create_file(&rd_root_dev, &dev_attr_key);
+	if (ret < 0) {
+		device_unregister(&rd_root_dev);
+		goto out_unregister;
+	}
+
+	return 0;
+
+out_unregister:
+	unregister_blkdev(major_num, "sbd");
+out:
+	vfree(Device.data);
+	crypto_free_cipher(tfm);
+	return -ENOMEM;
+}
+
+static void __exit sbd_exit(void)
+{
+	del_gendisk(Device.gd);
+	put_disk(Device.gd);
+	unregister_blkdev(major_num, "sbd");
+	blk_cleanup_queue(Queue);
+	crypto_free_cipher(tfm);
+
+	device_remove_file(&rd_root_dev, &dev_attr_key);
+	device_unregister(&rd_root_dev);
+
+	vfree(Device.data);
+}
+
+module_init(sbd_init);
+module_exit(sbd_exit);
